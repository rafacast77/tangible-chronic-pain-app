{"version":3,"sources":["components/statisticsPageComponents/TimePeriods.module.css","components/ui/Card.module.css","components/ui/Card.js","components/ProfilePageComponents/RecordEntry.js","components/ProfilePageComponents/RecordDays.js","store/Auth-context.js","components/ProfilePageComponents/Records.js","pages/Records.js","components/EntriePageComponents/DatePicker.js","components/EntriePageComponents/PainEntriesPainRangeText.js","components/EntriePageComponents/PainScale.js","components/EntriePageComponents/location/LocationList.js","components/EntriePageComponents/location/LocationMenu.js","components/EntriePageComponents/location/EditLocation.js","components/EntriePageComponents/location/AddNewLocation.js","components/ui/OuterGrid.js","components/EntriePageComponents/location/Location.js","components/EntriePageComponents/medication/MedicationList.js","components/EntriePageComponents/medication/MedicationMenu.js","components/EntriePageComponents/medication/EditMedication.js","components/EntriePageComponents/medication/AddNewMedication.js","components/EntriePageComponents/medication/Medication.js","components/EntriePageComponents/treatment/TreatmentList.js","components/EntriePageComponents/treatment/TreatmentMenu.js","components/EntriePageComponents/treatment/EditTreatment.js","components/EntriePageComponents/treatment/AddNewTreatment.js","components/EntriePageComponents/treatment/Treatment.js","components/EntriePageComponents/ExtraComments.js","pages/PainEntries.js","components/profileComponents/CustomizedAccordion.js","components/profileComponents/UserGuideFormat.js","components/profileComponents/TextUserGuide.js","components/profileComponents/spectator/SpectatorMenu.js","components/profileComponents/spectator/Spectator.js","components/profileComponents/spectedUser/SpectedMenu.js","components/profileComponents/spectedUser/AddNewSpected.js","components/profileComponents/spectedUser/Spected.js","pages/Profile.js","components/statisticsPageComponents/AffectingFactors.js","components/statisticsPageComponents/ScaleFrequency.js","components/statisticsPageComponents/TimePeriods.js","components/statisticsPageComponents/StatisticFunctions.js","pages/Stats.js","images/tangerine.png","components/layout/NavBar.js","components/SignIn.js","components/SignUp.js","components/ui/LoginHttpRequests.js","pages/Home.js","App.js","index.js","components/statisticsPageComponents/ScaleFrequency.module.css"],"names":["module","exports","Card","props","newStyles","newStyle","className","classes","card","style","children","useStyles","makeStyles","theme","root","flexGrow","paper","padding","spacing","margin","maxWidth","marginBottom","borderRadius","boxShadow","border","painCircle","fontSize","width","height","backgroundColor","circleColor","color","time","marginTop","remove","medicine","fontFamily","marginRight","treatment","RecordEntry","entry","console","log","painScale","Paper","Grid","container","xs","item","direction","Avatar","Typography","variant","date","align","sm","gutterBottom","painLocation","length","join","comments","medicationName","dose","effect","treatmentName","cursor","days","day","textAlign","borderBottom","lineHeight","background","RecordDays","currentDay","entries","Date","getDay","getDate","map","e","AuthContext","React","createContext","token","userUID","userEmail","userToSpectUID","isLoggedIn","isPainUser","login","logout","getUserUID","userID","getIsPainUser","painUser","getUserToSpectUID","getUserEmail","AuthContextProvider","initialToken","localStorage","getItem","initialuserUID","initialuserToSpectUID","initialisPainUser","initialiuserEmail","useState","setToken","setIsPainUser","setUserUID","setUserToSpectUID","setuserEmail","contextValue","setItem","removeItem","userToSpectID","usrEmail","Provider","value","display","flexWrap","justifyContent","swapBar","marginLeft","getNextMonth","currentMonth","add","getFullYear","getMonth","toLocaleDateString","month","year","currentFormattedMonth","Records","authCtx","useContext","rawData","setRawData","setCurrentMonth","currentEntries","setCurrentEntries","monthHasEntries","setMonthHasEntries","isMount","setIsMount","isloading","setIsloading","appHasEntries","setAppHasEntries","goToNextPage","goToPrevPage","dataHandler","data","millisecondDates","sortedStringDates","sortedDates","el","push","parse","sort","a","b","forEach","element","formatDate","regex","RegExp","monthContainsEntries","test","sortedEverything","monthName","currentMonthEntries","Object","keys","sortedMonthEntries","reduce","accumulatorObject","thisEvent","key","useEffect","fetch","then","response","ok","json","Error","extractedData","tempData","catch","error","CircularProgress","Container","alignItems","Button","size","startIcon","onClick","endIcon","records","Home","outerGrid","timeGrid","textField","calendar","DatesPicker","currentTime","toLocaleTimeString","substr","undefined","currentDateTime","setDate","setTime","dateTime","setDateTime","getDateTime","utcOffset","onChange","offsetDate","getTime","getTimezoneOffset","prevState","minDate","TextField","id","label","type","defaultValue","event","target","InputLabelProps","shrink","inputProps","step","memo","MINOR_PAIN","MODERATE_PAIN","SEVERE_PAIN","MARKS","painIntensity","description","PAGESWAPTITLES","question","title","currentPainLevel","titleDescription","innerGrid","painDescription","PainScale","currentPain","setCurrentPain","setPainDescription","Slider","getAriaValueText","getPainScaleValue","valueLabelDisplay","min","max","marks","addButton","entryPainLocations","LocationList","painLocationCheckboxHandler","useCallback","indexOf","name","splice","getPainLocation","FormControl","component","FormGroup","listPainLocations","location","selected","FormControlLabel","locationName","control","Checkbox","fireBaseId","toLocationMenu","extendedIcon","addBackButton","switchText","LocationMenu","SelectedPainLocationHandler","getSelectedLocation","FormLabel","Switch","p","checked","IconButton","locationToEdit","swaptoLocationEdit","locationToDelete","getLocationToDelete","swapToAddNewLocation","toLocationList","addBack","EditLocation","locationToEditInput","useRef","inputRef","autoFocus","painLocationToEdit","current","editLocationName","AddNewLocation","locationToAddInput","addNewLocation","OuterGrid","Location","locationList","locationMenu","editLocation","addLocation","deleteLocation","locationScreen","setLocationScreen","setPainLocationToEdit","setListPainLocations","forceUpdate","setForceUpdate","toLocationMenuHandler","getLocationList","listLocations","selectedLocation","method","body","JSON","stringify","headers","locationToAdd","entryMedications","formControl","paddingLeft","formControlTitle","MedicationList","medicationCheckboxHandler","medicationIndex","findIndex","med","parentElement","nextSibling","setAttribute","getMedication","medicationEffectHandler","i","previousSibling","innerText","medicationDoseHandler","listMedications","medication","InputLabel","Select","native","FormHelperText","toMedicationMenu","MedicationMenu","SelectedMedicationHandler","getSelectedMedication","medicationToEdit","swaptoMedicationEdit","medicationToDelete","getMedicationToDelete","swapToAddNewMedication","toMedicationList","EditMedication","medicationToEditInput","editMedicationName","minWidth","selectEmpty","AddNewMedication","strengthToInput","measureToInput","medicationToAddInput","htmlFor","addNewMedication","Medication","medicationList","medicationMenu","editMedication","addMedication","deleteMedication","medicationScreen","setMedicationScreen","setMedicationToEdit","setListMedications","toMedicationMenuHandler","getMedicationList","selectedMedication","medicationToAdd","entryTreatments","TreatmentList","treatmentCheckboxHandler","treatmentIndex","tret","getTreatment","treatmentEffectHandler","listTreatments","toTreatmentMenu","TreatmentMenu","SelectedTreatmentHandler","getSelectedTreatment","treatmentToEdit","swaptoTreatmentEdit","treatmentToDelete","getTreatmentToDelete","swapToAddNewTreatment","toTreatmentList","EditTreatment","treatmentToEditInput","editTreatmentName","AddNewTreatment","treatmentToAddInput","addNewTreatment","Treatment","treatmentList","treatmentMenu","editTreatment","addTreatment","deleteTreatment","treatmentScreen","setTreatmentScreen","setTreatmentToEdit","setListTreatments","toTreatmentMenuHandler","getTreatmentList","submitMedication","selectedTreatment","treatmentToAdd","textBox","submitButton","extraComments","paddingTop","ExtraComments","commentToAddInput","multiline","rows","comment","getComment","PainEntries","painEntry","setPainEntry","pageSwap","setPageSwap","updateDateTimeHandler","EntryDateAndTime","disabled","DatePicker","entryLocations","entryPainScale","entryMedicine","entryTreatment","entryComments","res","window","reload","sendPainEntryToFirebase","heading","fontWeight","typography","fontWeightBold","accordion","accordionText","mainAccordion","accordionColor","CustomizedAccordion","panel","expanded","setExpanded","Accordion","isExpanded","AccordionSummary","expandIcon","Badge","badgeContent","invisible","showBadge","accordionTitle","AccordionDetails","bodyText","textMargin","fontWeightMedium","subTitle1","subTitle2","fontWeightRegular","UserGuideFormat","userGuideText","text","userGuide","userGuideDesc","stats","profile","SpectatorMenu","userToSpectate","email","requestAccepted","deleteSpected","request","addPainUserToBeSpectated","spectatorToDelete","declineUserToBeSpected","Spectator","spectatorMenu","addSpectator","deleteSpectator","painUserAccountId","painUserEmail","setUserToSpectate","deleteSpectedHandler","selectedSpectator","accountID","addPainUserToBeSpectatedHandler","declineUserToBeSpectedHandler","resp","getSpectatorList","spectatorInfo","userInfoToSpect","userToSpect","SpectedMenu","listPainSpecteds","spected","spectedName","spectedToDelete","getSpectedToDelete","swapToAddNewSpected","AddNewSpected","spectedToAddInput","addNewSpected","toSpectedMenu","Spected","spectedMenu","addSpected","spectedScreen","setSpectedScreen","setListPainSpecteds","getSpectedList","listSpecteds","getPainSpected","spectedToEdit","spectedInfo","AccountID","spectedToAdd","SpectedEmailList","Account","spectedEmail","painUserAccount","Profile","state","setstate","shodbadge","graphMargin","left","graphTitle","paddingBottom","AffectingFactors","toPercent","decimal","toFixed","statsTitle","ResponsiveContainer","BarChart","frequencyData","layout","stackOffset","CartesianGrid","strokeDasharray","XAxis","dataKey","tickFormatter","YAxis","angle","Tooltip","stroke","strokeWidth","formatter","Legend","Bar","fill","barColor","ScaleFrequency","scaleFrequency","none","minor","moderate","severe","unimaginable","listOfPainEntries","listOfEntries","currentScale","styles","calculateAverage","arr","morningTotal","TimePeriods","timePeriods","earlyMorning","morning","afternoon","evening","curHr","split","now","getHours","getTimeFromHours","currentTimePeriods","locationCounter","recordedLocations","entriesLength","locationsCount","locationArray","num","count","frequencyPercentage","factorAverage","compare","factorEffectAverage","recordedMedicine","recordedTreatment","factorAndEffectAverage","treatAndMed","medAndTreatBetterAndTotal","factor","factorIndex","effecttoAVG","total","effectName","createListFactorEffects","concat","createListMedTreat","effectAverage","Stats","locationFrequency","negativeEffectFrequency","positiveEffectFrequency","ineffectualFactorFrequency","painEntriesStats","setPainEntriesStats","md","lg","xl","buttonPadding","paddingRight","NavBar","AppBar","position","Toolbar","src","tangerine","alt","Link","to","renderEntryScreen","Copyright","href","flexDirection","avatar","palette","secondary","main","form","submit","SignIn","emailInputRef","passwordInputRef","elevation","square","noValidate","onSubmit","preventDefault","enteredEmail","enteredPassword","required","fullWidth","autoComplete","toSignUp","Box","mt","ButtonOn","ButtonOff","SignUp","nameInputRef","lastNameInputRef","userRole","setuserRole","userRoleBtnClr","setuserRoleBtnClr","changeBtnColor","displayName","clsx","toSignIn","getUserAccountDatabase","errorMessage","message","accountInfo","alert","image","backgroundImage","backgroundRepeat","grey","backgroundSize","backgroundPosition","Signin","history","useHistory","isSignIn","setIsSignIn","signInUpSwap","submitHandler","password","returnSecureToken","getUserLoginData","localId","idToken","Info","replace","createNewUser","userData","createUserAccountDatabase","CssBaseline","createTheme","primary","light","dark","contrastText","body1","subtitle1","App","fallback","path","exact","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9a7bc7d8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"time-periods-container\":\"TimePeriods_time-periods-container__3QZ4a\",\"time-container\":\"TimePeriods_time-container__1ssTC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__IvIPt\"};","import React from \"react\";\r\nimport classes from \"./Card.module.css\";\r\n\r\nfunction Card(props) {\r\n  const newStyles = props.newStyle;\r\n\r\n  return (\r\n    <div className={classes.card} style={newStyles}>\r\n      {props.children}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import { Typography, ButtonBase, Paper, Grid, Avatar } from \"@material-ui/core\";\r\n\r\nimport React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport ClearIcon from \"@material-ui/icons/Clear\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(4),\r\n    margin: \"auto\",\r\n    maxWidth: 700,\r\n    marginBottom: \"2rem\",\r\n    borderRadius: \"56px\",\r\n    boxShadow: \"3px 3px 8px rgba(0, 0, 0, 0.2)\",\r\n    border: \"1px solid #f3f3f3\",\r\n  },\r\n  painCircle: {\r\n    fontSize: \"2rem\",\r\n    width: 70,\r\n    height: 70,\r\n    backgroundColor: ({ circleColor }) => circleColor,\r\n    color: \"black\",\r\n  },\r\n  time: {\r\n    marginTop: \".5rem\",\r\n    color: \"#333\",\r\n  },\r\n  remove: {\r\n    color: \"#f44336\",\r\n  },\r\n  medicine: {\r\n    color: \"#077d0b\",\r\n    fontFamily: \"Roboto\",\r\n    fontSize: \"19px\",\r\n    marginRight: \".5rem\",\r\n  },\r\n  treatment: {\r\n    color: \"#077d0b\",\r\n    fontFamily: \"Roboto\",\r\n    fontSize: \"19px\",\r\n  },\r\n}));\r\n\r\nconst colorHandler = (painScale) => {\r\n  if (painScale === 0) {\r\n    return \"rgba(6, 209, 255, 0.496)\";\r\n  } else if (painScale === 1 || painScale === 2 || painScale === 3) {\r\n    return \"rgba(6, 255, 43, 0.496)\";\r\n  } else if (painScale === 4 || painScale === 5 || painScale === 6) {\r\n    return \" rgba(255, 234, 6, 0.626)\";\r\n  } else if (painScale === 7 || painScale === 8 || painScale === 9) {\r\n    return \"rgba(255, 176, 6, 0.728)\";\r\n  } else if (painScale === 10) {\r\n    return \"rgba(255, 6, 6, 0.633)\";\r\n  }\r\n};\r\n\r\nconst RecordEntry = ({ entry }) => {\r\n  console.log(entry, \"currententry\");\r\n\r\n  const classes = useStyles({ circleColor: colorHandler(entry.painScale) });\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Paper className={classes.paper}>\r\n        <Grid container spacing={5}>\r\n          {/* Left column */}\r\n          <Grid xs={2} item direction=\"column\">\r\n            <Avatar className={classes.painCircle}>{entry.painScale}</Avatar>\r\n            <Typography className={classes.time} variant=\"body1\">\r\n              {entry.date.time}\r\n            </Typography>\r\n          </Grid>\r\n          {/* Middle column */}\r\n          <Grid align=\"left\" item xs={8} sm container>\r\n            <Grid item xs container direction=\"column\" spacing={2}>\r\n              <Grid item xs>\r\n                <Typography gutterBottom variant=\"subtitle1\">\r\n                  {entry.painLocation && entry.painLocation.length === 1\r\n                    ? \"Pain location:\"\r\n                    : \"Pain locations:\"}\r\n                </Typography>\r\n                <Typography color=\"blueGrey\" gutterBottom variant=\"body1\">\r\n                  {entry.painLocation\r\n                    ? entry.painLocation.join(\" - \")\r\n                    : \"No location specified\"}\r\n                </Typography>\r\n                <Typography gutterBottom variant=\"subtitle1\">\r\n                  Comments:\r\n                </Typography>\r\n                <Typography variant=\"body1\" gutterBottom>\r\n                  {entry.comments !== \"\" ? entry.comments : \"No comments\"}\r\n                </Typography>\r\n                {/* Medicine grid */}\r\n                <Typography gutterBottom variant=\"subtitle1\">\r\n                  Medicine:\r\n                </Typography>\r\n                <Grid container xs direction=\"row\">\r\n                  <Grid item xs={6}>\r\n                    <Typography className={classes.medicine} gutterBottom>\r\n                      {entry.medicine && entry.medicine.length !== 0\r\n                        ? entry.medicine[0].medicationName\r\n                        : \"No medicine specified\"}{\" \"}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={2}>\r\n                    <Typography variant=\"subtitle1\" gutterBottom>\r\n                      {entry.medicine && entry.medicine.length !== 0\r\n                        ? \"Dose: \" + entry.medicine[0].dose\r\n                        : \"\"}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <Typography variant=\"subtitle1\" gutterBottom>\r\n                      {entry.medicine && entry.medicine.length !== 0\r\n                        ? \"Effect: \" + entry.medicine[0].effect\r\n                        : \"\"}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n                {/* Medicine grid */}\r\n                <Typography gutterBottom variant=\"subtitle1\">\r\n                  Treatment:\r\n                </Typography>\r\n                <Grid container xs direction=\"row\">\r\n                  <Grid item xs={8}>\r\n                    <Typography className={classes.treatment} gutterBottom>\r\n                      {entry.treatment && entry.treatment.length !== 0\r\n                        ? entry.treatment[0].treatmentName\r\n                        : \"No treatment specified\"}{\" \"}\r\n                    </Typography>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={4}>\r\n                    <Typography variant=\"subtitle1\" gutterBottom>\r\n                      {entry.treatment && entry.treatment.length !== 0\r\n                        ? \"Effect: \" + entry.treatment[0].effect\r\n                        : \" \"}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n\r\n            {/* Right column */}\r\n            <Grid item xs={2} align=\"right\">\r\n              <Typography variant=\"subtitle1\">\r\n                <Typography\r\n                  variant=\"body2\"\r\n                  style={{ cursor: \"pointer\" }}\r\n                  className={classes.remove}\r\n                >\r\n                  <ClearIcon fontSize=\"large\" />\r\n                </Typography>\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RecordEntry;\r\n","import { Typography } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport RecordEntry from \"./RecordEntry\";\r\n\r\nconst days = [\r\n  \"Sunday\",\r\n  \"Monday\",\r\n  \"Tuesday\",\r\n  \"Wednesday\",\r\n  \"Thursday\",\r\n  \"Friday\",\r\n  \"Saturday\",\r\n];\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  day: {\r\n    color: \"#666\",\r\n    margin: \"auto\",\r\n    marginBottom: \"3.1rem\",\r\n    width: 500,\r\n    textAlign: \"center\",\r\n    borderBottom: \"2px solid #666\",\r\n    lineHeight: \"0.1em\",\r\n\r\n    \"&:first-child\": {\r\n      marginTop: \"1.8rem\",\r\n    },\r\n    \"& span\": {\r\n      color: \"#666\",\r\n      margin: \"auto\",\r\n      background: \"#fff\",\r\n      padding: \"0 10px\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst dateToWeekday = (date) => {\r\n  return days[new Date(date).getDay()] + \" \" + new Date(date).getDate();\r\n};\r\n\r\nconst RecordDays = ({ currentDay, entries }) => {\r\n  const classes = useStyles({});\r\n\r\n  return (\r\n    <>\r\n      <Typography className={classes.day} variant=\"h5\">\r\n        <span> {dateToWeekday(currentDay)}</span>\r\n      </Typography>\r\n\r\n      {entries.map((e) => {\r\n        return <RecordEntry entry={e} />;\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RecordDays;\r\n","import React, { useState } from \"react\";\r\n\r\n// This is the context used to judge if a user role and if is logged in.\r\nconst AuthContext = React.createContext({\r\n  token: \"\",\r\n  userUID: \"\",\r\n  userEmail: \"\",\r\n  userToSpectUID: \"\",\r\n  isLoggedIn: false,\r\n  isPainUser: null,\r\n  login: (token) => {},\r\n  logout: () => {},\r\n  //userRole: (painUser) => {},\r\n  getUserUID: (userID) => {},\r\n  getIsPainUser: (painUser) => {},\r\n  getUserToSpectUID: (userToSpectUID) => {},\r\n  getUserEmail: (userEmail) => {},\r\n});\r\n\r\n// All components wrapped with this component will have access to the data in AuthContext\r\nexport const AuthContextProvider = (props) => {\r\n  const initialToken = localStorage.getItem(\"token\");\r\n  const initialuserUID = localStorage.getItem(\"userUID\");\r\n  const initialuserToSpectUID = localStorage.getItem(\"userToSpectUID\");\r\n  const initialisPainUser = localStorage.getItem(\"isPainUser\");\r\n  const initialiuserEmail = localStorage.getItem(\"userEmail\");\r\n\r\n  const [token, setToken] = useState(initialToken);\r\n  const [isPainUser, setIsPainUser] = useState(initialisPainUser === \"true\");\r\n  const [userUID, setUserUID] = useState(initialuserUID);\r\n  const [userToSpectUID, setUserToSpectUID] = useState(initialuserToSpectUID);\r\n  const [userEmail, setuserEmail] = useState(initialiuserEmail);\r\n  /**\r\n   * token is an empty string or a string.\r\n   * !! transforms it into a boolean\r\n   * empty string = false, existing string = true\r\n   */\r\n  const userIsLoggedIn = !!token;\r\n\r\n  // Checks if user is logged in\r\n  const loginHandler = (token) => {\r\n    setToken(token);\r\n    localStorage.setItem(\"token\", token);\r\n  };\r\n\r\n  // Checks if user is logged out\r\n  const logoutHandler = () => {\r\n    setToken(null);\r\n    localStorage.removeItem(\"userUID\");\r\n    localStorage.removeItem(\"userToSpectUID\");\r\n    localStorage.removeItem(\"userEmail\");\r\n    localStorage.removeItem(\"token\");\r\n    localStorage.removeItem(\"isPainUser\");\r\n  };\r\n\r\n  // Checks user role\r\n  const isPainUserHandler = (painUser) => {\r\n    // When user sign up isPainUser is saved in firebase\r\n    // When sign in again that variable is fetched here\r\n    setIsPainUser(painUser);\r\n    localStorage.setItem(\"isPainUser\", painUser);\r\n  };\r\n\r\n  // Gets the user ID in order to get his related pain information\r\n  const getUserUIDHandler = (userID) => {\r\n    setUserUID(userID);\r\n    localStorage.setItem(\"userUID\", userID);\r\n  };\r\n\r\n  // Gets the user ID in order to get his related pain information\r\n  const getUserEmailHandler = (usrEmail) => {\r\n    setuserEmail(usrEmail);\r\n    localStorage.setItem(\"userEmail\", usrEmail);\r\n  };\r\n\r\n  // Gets the user ID in order to get his related pain information\r\n  const getUserToSpectUIDHandler = (userToSpectID) => {\r\n    setUserToSpectUID(userToSpectID);\r\n    localStorage.setItem(\"userToSpectUID\", userToSpectID);\r\n  };\r\n\r\n  const contextValue = {\r\n    token: token,\r\n    isLoggedIn: userIsLoggedIn,\r\n    isPainUser: isPainUser,\r\n    userToSpectUID: userToSpectUID,\r\n    userUID: userUID,\r\n    userEmail: userEmail,\r\n    login: loginHandler,\r\n    logout: logoutHandler,\r\n    //userRole: isPainUserHandler,\r\n    getUserUID: getUserUIDHandler,\r\n    getUserToSpectUID: getUserToSpectUIDHandler,\r\n    getIsPainUser: isPainUserHandler,\r\n    getUserEmail: getUserEmailHandler,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={contextValue}>\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;\r\n","import React, { useState, useEffect, useContext, useMemo } from \"react\";\r\nimport { Container, Typography, makeStyles, Button } from \"@material-ui/core\";\r\nimport Card from \"../../components/ui/Card\";\r\nimport RecordDays from \"./RecordDays\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport ChevronLeftTwoToneIcon from \"@material-ui/icons/ChevronLeftTwoTone\";\r\nimport ChevronRightTwoToneIcon from \"@material-ui/icons/ChevronRightTwoTone\";\r\nimport AuthContext from \"../../store/Auth-context\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"center\",\r\n  },\r\n  swapBar: {\r\n    marginLeft: theme.spacing(4.2),\r\n    marginRight: theme.spacing(4.2),\r\n  },\r\n}));\r\n\r\n// This function formats a date to \"DD Month YYYY\"\r\nconst formatDate = (element) => {\r\n  return new Date(element).toLocaleDateString(\"en-gb\", {\r\n    year: \"numeric\",\r\n    month: \"long\",\r\n    day: \"numeric\",\r\n  });\r\n};\r\n\r\n// This function takes in a date and returns its next calendar month\r\n// If second argument is set as false, it will return the prev month\r\nconst getNextMonth = (currentMonth, add = true) => {\r\n  let date = new Date(currentMonth);\r\n  date = add\r\n    ? new Date(date.getFullYear(), date.getMonth() + 1, 1).toLocaleDateString(\r\n        \"en-GB\",\r\n        {\r\n          month: \"long\",\r\n          year: \"numeric\",\r\n        }\r\n      )\r\n    : new Date(date.getFullYear(), date.getMonth() - 1, 1).toLocaleDateString(\r\n        \"en-GB\",\r\n        {\r\n          month: \"long\",\r\n          year: \"numeric\",\r\n        }\r\n      );\r\n  return date;\r\n};\r\n\r\n// Current day and month formatted to \"Month YYYY\"\r\nconst currentFormattedMonth = new Date(\r\n  new Date().getFullYear(),\r\n  new Date().getMonth(),\r\n  1\r\n).toLocaleDateString(\"en-GB\", {\r\n  month: \"long\",\r\n  year: \"numeric\",\r\n});\r\n\r\n// Beginning of the component\r\nconst Records = () => {\r\n  const authCtx = useContext(AuthContext);\r\n  let userID;\r\n  if (authCtx.isPainUser) {\r\n    userID = authCtx.userUID;\r\n  } else {\r\n    userID = authCtx.userToSpectUID;\r\n  }\r\n\r\n  // Material UI Styles\r\n  const classes = useStyles();\r\n\r\n  // State management\r\n  const [rawData, setRawData] = useState([]);\r\n  const [currentMonth, setCurrentMonth] = useState(currentFormattedMonth);\r\n  const [currentEntries, setCurrentEntries] = useState([]);\r\n  const [monthHasEntries, setMonthHasEntries] = useState();\r\n  const [isMount, setIsMount] = useState(true);\r\n  const [isloading, setIsloading] = useState(true);\r\n  const [appHasEntries, setAppHasEntries] = useState(false);\r\n\r\n  // Page change handler\r\n  const goToNextPage = () => {\r\n    setCurrentMonth(getNextMonth(currentMonth));\r\n  };\r\n  const goToPrevPage = () => {\r\n    setCurrentMonth(getNextMonth(currentMonth, false));\r\n  };\r\n\r\n  // Get each day's entries from the data and return it as an array of JSX files\r\n  const getDay = (entries) => {\r\n    const records = [];\r\n\r\n    for (const day in entries) {\r\n      records.push(<RecordDays currentDay={day} entries={entries[day]} />);\r\n    }\r\n\r\n    return records;\r\n  };\r\n\r\n  // Takes in data from fetch and sorts it all in a dictionary of dates\r\n  const dataHandler = (data) => {\r\n    const millisecondDates = [];\r\n    const sortedStringDates = [];\r\n    const sortedDates = [];\r\n\r\n    for (const el in data) {\r\n      // Convert fetched dates to ms for easier sort\r\n      millisecondDates.push(Date.parse(new Date(data[el].date.date)));\r\n    }\r\n\r\n    // Sort ms dates array\r\n    millisecondDates.sort(function (a, b) {\r\n      return a - b;\r\n    });\r\n\r\n    // Push array of converted ms dates to new array\r\n    millisecondDates.forEach((element) => {\r\n      sortedStringDates.push(formatDate(element));\r\n      sortedDates.push(element);\r\n    });\r\n\r\n    // console.log(sortedStringDates, \"All string dates sorted\");\r\n    // console.log(sortedDates, \"All dates sorted\");\r\n\r\n    const regex = new RegExp(`${currentMonth}`);\r\n    const monthContainsEntries = regex.test(sortedStringDates);\r\n    setMonthHasEntries(monthContainsEntries);\r\n\r\n    // If the month contains entries\r\n    if (monthContainsEntries) {\r\n      let sortedEverything = data.map((el) => {\r\n        const monthName = new Date(el.date.date).toLocaleDateString(\"en-GB\", {\r\n          day: \"numeric\",\r\n          month: \"long\",\r\n          year: \"numeric\",\r\n        });\r\n\r\n        // console.log(regex.test(monthName), \"REGEX MONTH NAME\");\r\n\r\n        if (regex.test(currentMonth)) {\r\n          return { [monthName]: el };\r\n        }\r\n      });\r\n\r\n      // console.log(sortedEverything, \"sortedEverything\");\r\n      const currentMonthEntries = [];\r\n\r\n      sortedEverything.map((el) => {\r\n        if (regex.test(Object.keys(el))) {\r\n          currentMonthEntries.push(el);\r\n        }\r\n      });\r\n\r\n      // console.log(`to be sorted:`, currentMonthEntries);\r\n\r\n      const sortedMonthEntries = currentMonthEntries.reduce(\r\n        (accumulatorObject, thisEvent) => {\r\n          // Here, we need to check if the accumulator object contains this key:\r\n          const key = Object.keys(thisEvent)[0];\r\n          if (accumulatorObject[key]) {\r\n            // If our object has this key, we've already\r\n            //  started an array for this date. Simply add\r\n            //  this object to that array.\r\n            accumulatorObject[key] = [\r\n              ...accumulatorObject[key],\r\n              thisEvent[key],\r\n            ];\r\n          } else {\r\n            // This is a new key. Create the property, and\r\n            //  create the array.\r\n            accumulatorObject[key] = [thisEvent[key]];\r\n          }\r\n          // And we have to return the object, so it's\r\n          // available for the next iteration of reduce.\r\n          return accumulatorObject;\r\n        },\r\n        {}\r\n      );\r\n\r\n      // console.log(\"sorted:\", sortedMonthEntries);\r\n      setCurrentEntries(sortedMonthEntries, \"currentPainEntries\");\r\n    }\r\n  };\r\n\r\n  // This first of two effects handles fetching the data only one time\r\n  // this will only run once, as it has no dependencies\r\n  useEffect(() => {\r\n    // console.count(\"FIRST USEEFFECT\");\r\n\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${userID}/pain-entries.json`\r\n    )\r\n      .then((response) => {\r\n        // If the response of the http request is 200 (ok)\r\n        if (response.ok) {\r\n          // get the json of that response\r\n          return response.json();\r\n        } else {\r\n          // If the response status is bad, throw an error\r\n          throw new Error();\r\n        }\r\n      })\r\n      .then((data) => {\r\n        const extractedData = [];\r\n        // For each element of the fetched data\r\n        for (const el in data) {\r\n          // populate a temporary data array\r\n          const tempData = {\r\n            ...data[el],\r\n          };\r\n          // and push its result to extracted data\r\n          extractedData.push(tempData);\r\n        }\r\n\r\n        // Handle states\r\n        setAppHasEntries(true);\r\n        setRawData(extractedData);\r\n        setIsloading(false);\r\n      })\r\n      .catch((e) => {\r\n        // If there is an error, log it to the console\r\n        // and handle the loading and app entries states\r\n        console.error(e);\r\n        setAppHasEntries(false);\r\n        setIsloading(false);\r\n      });\r\n  }, []);\r\n\r\n  // The second effect handles the data we get in the first effect's fetch\r\n  // We skip the first mount, and change it every time a dependency changes\r\n  useEffect(() => {\r\n    // console.count(\"SECOND USEEFFECT\");\r\n\r\n    // This isMount state allows to skip the first render\r\n    // of this effect and run it starting from the second.\r\n    if (isMount) {\r\n      setIsMount(false);\r\n      return;\r\n    }\r\n\r\n    // This handler receives the data extracted from Firebase,\r\n    // and handles and renders it by setting the relevant states\r\n    if (appHasEntries) {\r\n      dataHandler(rawData);\r\n    }\r\n  }, [rawData, currentMonth]);\r\n\r\n  if (isloading) {\r\n    return <CircularProgress />;\r\n  }\r\n\r\n  // Test current entries value\r\n  // console.log(currentEntries, \"currentEntries\");\r\n\r\n  if (appHasEntries) {\r\n    return (\r\n      <Container maxWidth=\"lg\">\r\n        <Grid container>\r\n          <Card newStyle={{ marginTop: \"4rem\" }}>\r\n            <Grid item xs={12}>\r\n              <Typography align=\"center\" variant=\"h4\">\r\n                Pain records\r\n              </Typography>\r\n            </Grid>\r\n          </Card>\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            className={classes.swapBar}\r\n          >\r\n            <Button\r\n              size=\"large\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              startIcon={<ChevronLeftTwoToneIcon />}\r\n              onClick={goToPrevPage}\r\n            >\r\n              Back\r\n            </Button>\r\n            <Typography variant=\"h4\">{currentMonth}</Typography>\r\n            <Button\r\n              size=\"large\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              endIcon={<ChevronRightTwoToneIcon />}\r\n              onClick={goToNextPage}\r\n            >\r\n              Next\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid>\r\n          <Card newStyle={{ textAlign: \"center\", padding: \"2.5rem 0\" }}>\r\n            {monthHasEntries && getDay(currentEntries)}\r\n            {!monthHasEntries && (\r\n              <Typography variant=\"h5\">\r\n                No pain was recorded this month\r\n              </Typography>\r\n            )}\r\n          </Card>\r\n        </Grid>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  if (!appHasEntries) {\r\n    return (\r\n      <Container maxWidth=\"lg\">\r\n        <Grid container>\r\n          <Card newStyle={{ marginTop: \"4rem\" }}>\r\n            <Grid item xs={12}>\r\n              <Typography align=\"center\" variant=\"h4\">\r\n                Pain records\r\n              </Typography>\r\n            </Grid>\r\n          </Card>\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n            className={classes.swapBar}\r\n          >\r\n            <Button\r\n              size=\"large\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              startIcon={<ChevronLeftTwoToneIcon />}\r\n              onClick={goToPrevPage}\r\n            >\r\n              Back\r\n            </Button>\r\n            <Typography variant=\"h4\">{currentMonth}</Typography>\r\n            <Button\r\n              size=\"large\"\r\n              variant=\"contained\"\r\n              color=\"primary\"\r\n              endIcon={<ChevronRightTwoToneIcon />}\r\n              onClick={goToNextPage}\r\n            >\r\n              Next\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid>\r\n          <Card newStyle={{ textAlign: \"center\", padding: \"2.5rem 0\" }}>\r\n            <Typography variant=\"h5\">\r\n              No pain was recorded this month\r\n            </Typography>\r\n          </Card>\r\n        </Grid>\r\n      </Container>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Records;\r\n","import Records from \"../components/ProfilePageComponents/Records\";\r\n\r\nconst Home = () => {\r\n  return <Records />;\r\n};\r\n\r\nexport default Home;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport Calendar from \"react-calendar\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport \"react-calendar/dist/Calendar.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  outerGrid: {\r\n    padding: theme.spacing(5),\r\n  },\r\n  timeGrid: {\r\n    marginTop: theme.spacing(4),\r\n  },\r\n  textField: {\r\n    marginLeft: theme.spacing(15),\r\n    width: 300,\r\n  },\r\n  calendar: {\r\n    height: \"320px\",\r\n    width: \"550px\",\r\n    boxShadow: \"0 6px 16px rgba(0, 0, 0, 0.2)\",\r\n  },\r\n}));\r\n\r\n/**\r\n * This component allows the user to choose the date and the time\r\n * when the pain episode occurred. The component is initialized\r\n * with the current date and time.\r\n */\r\nconst DatesPicker = (props) => {\r\n  const currentTime = new Date().toLocaleTimeString().substr(0, 5);\r\n\r\n  if (props.currentDateTime.time === undefined) {\r\n    props.currentDateTime.time = currentTime;\r\n  }\r\n\r\n  const [date, setDate] = useState(props.currentDateTime.date || new Date());\r\n  const [time, setTime] = useState(\r\n    `${props.currentDateTime.time}` || `${currentTime}`\r\n  );\r\n  const [dateTime, setDateTime] = useState({ date, time });\r\n\r\n  const dateChangeHandler = (e) => {\r\n    const offsetDate = new Date(e.getTime() - e.getTimezoneOffset() * 60000);\r\n    setDate(offsetDate);\r\n    setDateTime((prevState) => {\r\n      return { ...prevState, date: offsetDate };\r\n    });\r\n  };\r\n\r\n  const timeChangeHandler = (event) => {\r\n    setTime(event.target.value);\r\n    setDateTime((prevState) => {\r\n      return { ...prevState, time: event.target.value };\r\n    });\r\n  };\r\n\r\n  const classes = useStyles();\r\n\r\n  useEffect(() => {\r\n    props.getDateTime(dateTime);\r\n  }, [props, dateTime]);\r\n\r\n  return (\r\n    <>\r\n      <Grid className={classes.outerGrid}>\r\n        <Grid>\r\n          <Calendar\r\n            utcOffset={0}\r\n            className={classes.calendar}\r\n            onChange={dateChangeHandler}\r\n            value={props.currentDateTime.date}\r\n            minDate={new Date(\"1 Jan 2019\")}\r\n          />\r\n        </Grid>\r\n        <Grid className={classes.timeGrid}>\r\n          <TextField\r\n            id=\"time\"\r\n            label=\"Time of the pain\"\r\n            type=\"time\"\r\n            defaultValue={`${props.currentDateTime.time}` || `${currentTime}`}\r\n            className={classes.textField}\r\n            onChange={timeChangeHandler}\r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n            inputProps={{\r\n              step: 300, // 5 min\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default React.memo(DatesPicker);\r\n","/**\r\n * This component contains constant variables containing text used to populate\r\n * pain labels and ranges in the pain scale components.\r\n */\r\nconst MINOR_PAIN =\r\n  \"Nagging, annoying, but doesn't interfere with most daily living activities. Patient able to adapt to pain psychologically and with medication or devices such as cushions.\";\r\nconst MODERATE_PAIN =\r\n  \"Interferes significantly with daily living activities. Requires lifestyle changes but patient remains independent. Patient unable to adapt pain.\";\r\nconst SEVERE_PAIN =\r\n  \"Disabling; Unable to perform daily living activities.\\n Unable to engage in normal activities Patient is disable and unable to function independently\";\r\n\r\nexport const MARKS = [\r\n  {\r\n    value: 0,\r\n    label: 0,\r\n    painIntensity: \"Pain Free\",\r\n    description: \"Feeling perfectly normal.\",\r\n  },\r\n  {\r\n    value: 1,\r\n    label: 1,\r\n    painIntensity: \"Very Mid\",\r\n    description: MINOR_PAIN,\r\n  },\r\n  {\r\n    value: 2,\r\n    label: 2,\r\n    painIntensity: \"Discomforting\",\r\n    description: MINOR_PAIN,\r\n  },\r\n  {\r\n    value: 3,\r\n    label: 3,\r\n    painIntensity: \"Tolerable\",\r\n    description: MINOR_PAIN,\r\n  },\r\n  {\r\n    value: 4,\r\n    label: 4,\r\n    painIntensity: \"Distressing\",\r\n    description: MODERATE_PAIN,\r\n  },\r\n  {\r\n    value: 5,\r\n    label: 5,\r\n    painIntensity: \"Very Distressing\",\r\n    description: MODERATE_PAIN,\r\n  },\r\n  {\r\n    value: 6,\r\n    label: 6,\r\n    painIntensity: \"Intense\",\r\n    description: MODERATE_PAIN,\r\n  },\r\n  {\r\n    value: 7,\r\n    label: 7,\r\n    painIntensity: \"Very Intense\",\r\n    description: SEVERE_PAIN,\r\n  },\r\n  {\r\n    value: 8,\r\n    label: 8,\r\n    painIntensity: \"Utterly Horrible\",\r\n    description: SEVERE_PAIN,\r\n  },\r\n  {\r\n    value: 9,\r\n    label: 9,\r\n    painIntensity: \"Excruciating Unbearable\",\r\n    description: SEVERE_PAIN,\r\n  },\r\n  {\r\n    value: 10,\r\n    label: 10,\r\n    painIntensity: \"Unimaginable Unspeakable\",\r\n    description: SEVERE_PAIN,\r\n  },\r\n];\r\n\r\nexport const PAGESWAPTITLES = [\r\n  {\r\n    question: \"What was the day and time of your pain episode?\",\r\n    title: \"Date and Time\",\r\n  },\r\n  {\r\n    question: \"Where does it hurt?\",\r\n    title: \"Pain Location\",\r\n  },\r\n  {\r\n    question: \"How painful was the pain episode?\",\r\n    title: \"Pain Scale\",\r\n  },\r\n  {\r\n    question: \"What medicine did you take to ease the pain?\",\r\n    title: \"Medication\",\r\n  },\r\n  {\r\n    question: \"Did you try any treatment-method to ease the pain?\",\r\n    title: \"Treatments\",\r\n  },\r\n  {\r\n    question: \"Is there anything else you would like to add?\",\r\n    title: \"Extra Comments\",\r\n  },\r\n];\r\n","import React, { useState } from \"react\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport { MARKS } from \"./PainEntriesPainRangeText\";\r\n\r\nlet currentPainLevel = { value: 0, painIntensity: \"Pain Free\" };\r\n\r\n/**\r\n * This component allows the user to indicate the intensity of their pain\r\n * from 0 to 10.\r\n */\r\nconst useStyles = makeStyles((theme) => ({\r\n  outerGrid: {\r\n    padding: theme.spacing(5),\r\n  },\r\n  titleDescription: {\r\n    marginBottom: theme.spacing(3),\r\n  },\r\n  innerGrid: {\r\n    marginBottom: theme.spacing(1),\r\n  },\r\n  painDescription: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nconst PainScale = (props) => {\r\n  const classes = useStyles();\r\n  const [currentPain, setCurrentPain] = useState(MARKS[0].painIntensity);\r\n  const [painDescription, setPainDescription] = useState(MARKS[0].description);\r\n\r\n  const valueText = (value) => {\r\n    if (currentPainLevel.value === value) {\r\n      return;\r\n    } else {\r\n      currentPainLevel.value = value;\r\n      currentPainLevel.painIntensity = MARKS[value].painIntensity;\r\n      setCurrentPain(MARKS[value].painIntensity);\r\n      setPainDescription(MARKS[value].description);\r\n    }\r\n    props.getPainScaleValue(currentPainLevel.value);\r\n  };\r\n\r\n  return (\r\n    <Grid container direction=\"column\" className={classes.outerGrid}>\r\n      <Grid className={classes.titleDescription}>\r\n        <Grid className={classes.innerGrid}>\r\n          <Typography variant=\"h5\">Indicate your current pain level</Typography>\r\n        </Grid>\r\n        <Grid>\r\n          <Typography variant=\"subtitle1\">\r\n            0 being no pain at all 10 being the worst pain imaginable\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Slider\r\n        defaultValue={0}\r\n        getAriaValueText={valueText}\r\n        aria-labelledby=\"pain-scale\"\r\n        valueLabelDisplay=\"auto\"\r\n        step={1}\r\n        min={0}\r\n        max={10}\r\n        marks={MARKS}\r\n      />\r\n      <Typography\r\n        variant=\"h4\"\r\n        align=\"center\"\r\n        className={classes.painDescription}\r\n      >\r\n        {currentPain}\r\n      </Typography>\r\n      <Typography variant=\"body1\" className={classes.painDescription}>\r\n        {painDescription}\r\n      </Typography>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default React.memo(PainScale);\r\n","import React, { useCallback, useState } from \"react\";\r\nimport {\r\n  FormControl,\r\n  Button,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  addButton: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\nconst entryPainLocations = [];\r\n/**\r\n * This component allows a user to choose the location of their pain.\r\n * Only user selected locations appear in the list.\r\n * Selected Items are sent to the painEntries.js\r\n */\r\nconst LocationList = (props) => {\r\n  // const [isChecked, setIsChecked] = useState(false);\r\n\r\n  // const changeHandler = (e) => {\r\n  //   console.log(e.target.checked);\r\n  //   setIsChecked(e.target.checked);\r\n  // };\r\n\r\n  const classes = useStyles();\r\n  // Updates the pain locations list that is sent to PainEntries.js\r\n  const painLocationCheckboxHandler = useCallback(\r\n    (event) => {\r\n      if (entryPainLocations.indexOf(event.target.name) === -1) {\r\n        entryPainLocations.push(event.target.name);\r\n      } else {\r\n        entryPainLocations.splice(\r\n          entryPainLocations.indexOf(event.target.name),\r\n          1\r\n        );\r\n      }\r\n      // Sends updated list to PainEntries for submition\r\n      props.getPainLocation(entryPainLocations);\r\n    },\r\n    [props]\r\n  );\r\n\r\n  return (\r\n    <FormControl component=\"fieldset\">\r\n      <FormGroup aria-label=\"location\" name=\"location1\">\r\n        {props.listPainLocations.map((location) => {\r\n          if (location.selected) {\r\n            return (\r\n              <FormControlLabel\r\n                key={location.fireBaseId}\r\n                label={location.locationName}\r\n                control={\r\n                  <Checkbox\r\n                    onChange={painLocationCheckboxHandler}\r\n                    name={location.locationName}\r\n                    // onChange={changeHandler}\r\n                    // checked={isChecked}\r\n                  />\r\n                }\r\n              />\r\n            );\r\n          } else {\r\n            return null;\r\n          }\r\n        })}\r\n      </FormGroup>\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={props.toLocationMenu}\r\n        size={\"large\"}\r\n        className={classes.addButton}\r\n        color=\"primary\"\r\n      >\r\n        EDIT LOCATIONS\r\n      </Button>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default LocationList;\r\n","import IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteTwoTone from \"@material-ui/icons/DeleteTwoTone\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport BorderColorTwoToneIcon from \"@material-ui/icons/BorderColorTwoTone\";\r\nimport React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Button,\r\n  Switch,\r\n  FormControlLabel,\r\n  FormGroup,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  addBackButton: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  switchText: {\r\n    textAlign: \"left\",\r\n  },\r\n}));\r\n/**\r\n * This component is used for the user to enable or disable existant Locations.\r\n * It also contains a path to addNew, Edit and Delete Locations.\r\n */\r\nconst LocationMenu = (props) => {\r\n  // Used for styling this component\r\n  const classes = useStyles();\r\n\r\n  // Selects or De-selects the pain locations shown in locationList.js\r\n  const SelectedPainLocationHandler = (event) => {\r\n    props.listPainLocations.forEach((location) => {\r\n      if (location.locationName === event.target.name) {\r\n        location.selected = !location.selected;\r\n        props.getSelectedLocation(location);\r\n      }\r\n    });\r\n  };\r\n  // Edits a current location in locationMenu.js\r\n  const editPainLocationHandler = (locationToEdit) => {\r\n    props.swaptoLocationEdit(locationToEdit);\r\n  };\r\n\r\n  // Deletes a pain location in the locationMenu.js\r\n  const deletePainLocationHandler = (locationToDelete) => {\r\n    props.getLocationToDelete(locationToDelete);\r\n  };\r\n\r\n  // Deletes a pain location in the locationMenu.js\r\n  const addPainLocationHandler = () => {\r\n    props.swapToAddNewLocation();\r\n  };\r\n\r\n  return (\r\n    <FormControl component=\"fieldset\">\r\n      <FormLabel component=\"legend\">Location Menu</FormLabel>\r\n      <FormGroup aria-label=\"location\" name=\"location1\">\r\n        {props.listPainLocations.map((location) => {\r\n          return (\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justifyContent=\"space-between\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid xs={8} className={classes.switchText}>\r\n                <FormControlLabel\r\n                  label={location.locationName}\r\n                  control={\r\n                    <Switch\r\n                      p={0.5}\r\n                      onChange={SelectedPainLocationHandler}\r\n                      name={location.locationName}\r\n                      checked={location.selected}\r\n                    />\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid xs={2}>\r\n                <IconButton\r\n                  aria-label=\"delete\"\r\n                  className={classes.margin}\r\n                  onClick={() => editPainLocationHandler(location)}\r\n                >\r\n                  <BorderColorTwoToneIcon fontSize=\"medium\" color=\"primary\" />\r\n                </IconButton>\r\n              </Grid>\r\n              <Grid xs={2}>\r\n                <IconButton\r\n                  aria-label=\"delete\"\r\n                  className={classes.margin}\r\n                  onClick={() => deletePainLocationHandler(location)}\r\n                >\r\n                  <DeleteTwoTone fontSize=\"medium\" color=\"secondary\" />\r\n                </IconButton>\r\n              </Grid>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </FormGroup>\r\n      <Grid container direction=\"column\">\r\n        <Button\r\n          size=\"large\"\r\n          variant=\"contained\"\r\n          onClick={addPainLocationHandler}\r\n          color=\"primary\"\r\n          className={classes.addBackButton}\r\n        >\r\n          Add New\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={() => props.toLocationList()}\r\n          className={classes.addBackButton}\r\n        >\r\n          Back\r\n        </Button>\r\n      </Grid>\r\n    </FormControl>\r\n  );\r\n};\r\nexport default LocationMenu;\r\n","import React from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { TextField, Button, makeStyles } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  innerGrid: {\r\n    maxWidth: \"300px\",\r\n  },\r\n  addBack: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n/**\r\n * This component allows the user to edit a new location to the\r\n * list in locationMenu.js.\r\n */\r\nconst EditLocation = (props) => {\r\n  const classes = useStyles();\r\n  const locationToEditInput = useRef();\r\n\r\n  const editApplyHandler = () => {\r\n    props.painLocationToEdit.locationName = locationToEditInput.current.value;\r\n    props.editLocationName(props.painLocationToEdit);\r\n    props.toLocationMenu();\r\n  };\r\n\r\n  return (\r\n    <Grid container direction=\"column\" className={classes.innerGrid}>\r\n      <TextField\r\n        inputRef={locationToEditInput}\r\n        id=\"editLocation\"\r\n        type=\"text\"\r\n        aria-describedby=\"my-helper-text\"\r\n        autoFocus={true}\r\n        defaultValue={props.painLocationToEdit.locationName}\r\n        variant=\"filled\"\r\n      />\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        size=\"large\"\r\n        onClick={editApplyHandler}\r\n        className={classes.addBack}\r\n      >\r\n        Apply\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        size=\"large\"\r\n        onClick={() => props.toLocationMenu()}\r\n        className={classes.addBack}\r\n      >\r\n        Cancel\r\n      </Button>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default EditLocation;\r\n","import React from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { TextField, Button, makeStyles } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  innerGrid: {\r\n    maxWidth: \"300px\",\r\n  },\r\n  addBack: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\n/**\r\n * This component allows the user to add a new pain location to the\r\n * list in locationMenu.\r\n */\r\nconst AddNewLocation = (props) => {\r\n  const classes = useStyles();\r\n  const locationToAddInput = useRef();\r\n  const applyNewLocationHandler = (event) => {\r\n    const location = {\r\n      locationName: locationToAddInput.current.value,\r\n      selected: false,\r\n    };\r\n    props.addNewLocation(location);\r\n    props.toLocationMenu();\r\n  };\r\n\r\n  return (\r\n    <Grid container direction=\"column\" className={classes.innerGrid}>\r\n      <TextField\r\n        inputRef={locationToAddInput}\r\n        id=\"editLocation\"\r\n        type=\"text\"\r\n        aria-describedby=\"my-helper-text\"\r\n        label=\"Add New Location\"\r\n        autoFocus={true}\r\n        variant=\"filled\"\r\n      />\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        size=\"large\"\r\n        onClick={applyNewLocationHandler}\r\n        className={classes.addBack}\r\n      >\r\n        Apply\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        size=\"large\"\r\n        onClick={() => props.toLocationMenu()}\r\n        className={classes.addBack}\r\n      >\r\n        Cancel\r\n      </Button>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default AddNewLocation;\r\n","import React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  outerGrid: {\r\n    padding: theme.spacing(5),\r\n  },\r\n}));\r\nfunction OuterGrid(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid\r\n      className={classes.outerGrid}\r\n      container\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n    >\r\n      {props.children}\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default OuterGrid;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport LocationList from \"./LocationList\";\r\nimport LocationMenu from \"./LocationMenu\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport EditLocation from \"./EditLocation\";\r\nimport AddNewLocation from \"./AddNewLocation\";\r\nimport OuterGrid from \"../../ui/OuterGrid\";\r\nimport AuthContext from \"../../../store/Auth-context\";\r\n\r\nconst Location = (props) => {\r\n  const authCtx = useContext(AuthContext);\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // STATES\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // Shows pain location main page\r\n  const [locationScreen, setLocationScreen] = useState({\r\n    locationList: true,\r\n    locationMenu: false,\r\n    editLocation: false,\r\n    addLocation: false,\r\n    deleteLocation: false,\r\n  });\r\n\r\n  // Ued to passes location from locationMenu.js to EditLocation.js\r\n  const [painLocationToEdit, setPainLocationToEdit] = useState();\r\n\r\n  // List of all body locations\r\n  const [listPainLocations, setListPainLocations] = useState([]);\r\n\r\n  // This state is used to re-render the page after selectedLocationHandler\r\n  const [forceUpdate, setForceUpdate] = useState(0);\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // NAVIGATION FUNCTIONS\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // Swaps between location main page and Add location menu\r\n  const toLocationMenuHandler = () => {\r\n    setLocationScreen({\r\n      locationList: false,\r\n      locationMenu: true,\r\n      editLocation: false,\r\n      addLocation: false,\r\n      deleteLocation: false,\r\n    });\r\n  };\r\n\r\n  // Swaps between location Menu and location main page\r\n  const toLocationListHandler = () => {\r\n    setLocationScreen((prevState) => {\r\n      return { ...prevState, locationList: true, locationMenu: false };\r\n    });\r\n  };\r\n\r\n  // Swaps between location Menu and Edit location\r\n  const toLocationEditHandler = (locationToEdit) => {\r\n    setPainLocationToEdit(locationToEdit);\r\n    setLocationScreen((prevState) => {\r\n      return { ...prevState, locationMenu: false, editLocation: true };\r\n    });\r\n  };\r\n\r\n  // Swaps between location Menu to add New Location\r\n  const toAddNewLocationHandler = (locationToEdit) => {\r\n    setLocationScreen((prevState) => {\r\n      return { ...prevState, locationMenu: false, addLocation: true };\r\n    });\r\n  };\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // HTTP REQUESTS\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // PUT request to updates the 'selected' field of locations in Firebase\r\n  const selectedLocationHandler = (selectedLocation) => {\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/pain-locations/${selectedLocation.fireBaseId}.json`,\r\n      {\r\n        method: \"PUT\",\r\n        body: JSON.stringify(selectedLocation),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n    setForceUpdate(forceUpdate + 1);\r\n  };\r\n\r\n  // PUT request to updates the 'locationName' field of locations in Firebase\r\n  const editLocationNameHandler = (locationToEdit) => {\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/pain-locations/${locationToEdit.fireBaseId}.json`,\r\n      {\r\n        method: \"PUT\",\r\n        body: JSON.stringify(locationToEdit),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n  };\r\n\r\n  // POST new pain location to firebase\r\n  function addNewLocationHandler(locationToAdd) {\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/pain-locations.json`,\r\n      {\r\n        method: \"POST\",\r\n        body: JSON.stringify(locationToAdd),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    ).then((response) => {\r\n      getLocationList();\r\n    });\r\n  }\r\n\r\n  // DELETE request to delete a pain locations in Firebase\r\n  const locationToDeleteHandler = (locationToDelete) => {\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/pain-locations/${locationToDelete.fireBaseId}.json`,\r\n      { method: \"DELETE\" }\r\n    ).then((response) => {\r\n      getLocationList();\r\n    });\r\n  };\r\n\r\n  // GET request to Firebase for pain location list and updates state with it.\r\n  const getLocationList = () => {\r\n    // ${authCtx.userUID}/\r\n    console.log(\"PainUserId\", authCtx.userUID);\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/pain-locations.json`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        console.log(data);\r\n        const listLocations = [];\r\n        console.log(data);\r\n        for (const key in data) {\r\n          const location = {\r\n            fireBaseId: key,\r\n            ...data[key],\r\n          };\r\n          listLocations.push(location);\r\n        }\r\n        setListPainLocations(listLocations);\r\n      });\r\n  };\r\n\r\n  // GET request for the list of locations when Page loads for the first time.\r\n  useEffect(() => {\r\n    getLocationList();\r\n  }, []);\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // RETURN\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  return (\r\n    <OuterGrid>\r\n      {locationScreen.locationList && (\r\n        <LocationList\r\n          listPainLocations={listPainLocations}\r\n          getPainLocation={props.getPainLocation}\r\n          toLocationMenu={toLocationMenuHandler}\r\n        />\r\n      )}\r\n      {locationScreen.locationMenu && (\r\n        <Grid>\r\n          <LocationMenu\r\n            toLocationList={toLocationListHandler}\r\n            listPainLocations={listPainLocations}\r\n            getSelectedLocation={selectedLocationHandler}\r\n            swaptoLocationEdit={toLocationEditHandler}\r\n            swapToAddNewLocation={toAddNewLocationHandler}\r\n            getLocationToDelete={locationToDeleteHandler}\r\n          />\r\n        </Grid>\r\n      )}\r\n      {locationScreen.editLocation && (\r\n        <EditLocation\r\n          toLocationMenu={toLocationMenuHandler}\r\n          editLocationName={editLocationNameHandler}\r\n          painLocationToEdit={painLocationToEdit}\r\n        />\r\n      )}\r\n      {locationScreen.addLocation && (\r\n        <AddNewLocation\r\n          toLocationMenu={toLocationMenuHandler}\r\n          addNewLocation={addNewLocationHandler}\r\n          toLocationMenu={toLocationMenuHandler}\r\n        />\r\n      )}\r\n    </OuterGrid>\r\n  );\r\n};\r\n\r\nexport default Location;\r\n","import React from \"react\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  TextField,\r\n  Select,\r\n  makeStyles,\r\n  InputLabel,\r\n  FormHelperText,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nexport const entryMedications = [];\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    paddingLeft: 20,\r\n    maxWidth: 300,\r\n  },\r\n  formControlTitle: {\r\n    paddingLeft: 20,\r\n  },\r\n  dose: {\r\n    maxWidth: 80,\r\n  },\r\n  addButton: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n/**\r\n * This component allows a user to choose the medication taken after\r\n * their pain episode. Only user selected Medications appear in the list.\r\n * Selected medication are sent to the painEntries.js for submission\r\n */\r\nconst MedicationList = (props) => {\r\n  const classes = useStyles();\r\n  // Updates the medication list that is sent to PainEntries.js\r\n  const medicationCheckboxHandler = (event) => {\r\n    const medicationIndex = entryMedications.findIndex(\r\n      (med) => med.medicationName === event.target.name\r\n    );\r\n\r\n    if (medicationIndex === -1) {\r\n      entryMedications.push({\r\n        medicationName: event.target.name,\r\n        dose: ` - `,\r\n        effect: ` - `,\r\n      });\r\n      event.target.parentElement.parentElement.parentElement.nextSibling.setAttribute(\r\n        \"style\",\r\n        \"display: inline;\"\r\n      );\r\n    } else {\r\n      entryMedications.splice(medicationIndex, 1);\r\n      event.target.parentElement.parentElement.parentElement.nextSibling.setAttribute(\r\n        \"style\",\r\n        \"display: none;\"\r\n      );\r\n    }\r\n    props.getMedication(entryMedications);\r\n  };\r\n\r\n  // Adds effect after medicine to the corresponding medicine\r\n  const medicationEffectHandler = (event) => {\r\n    for (let i = 0; i < entryMedications.length; i++) {\r\n      if (\r\n        entryMedications[i].medicationName ===\r\n        event.target.parentElement.parentElement.parentElement.previousSibling\r\n          .innerText\r\n      ) {\r\n        entryMedications[i].effect = event.target.value;\r\n      }\r\n    }\r\n    props.getMedication(entryMedications);\r\n  };\r\n  // Adds the dose to the corresponding medicine\r\n  const medicationDoseHandler = (event) => {\r\n    for (let i = 0; i < entryMedications.length; i++) {\r\n      if (\r\n        entryMedications[i].medicationName ===\r\n        event.target.parentElement.parentElement.parentElement.previousSibling\r\n          .innerText\r\n      ) {\r\n        entryMedications[i].dose = event.target.value;\r\n      }\r\n    }\r\n    props.getMedication(entryMedications);\r\n  };\r\n\r\n  return (\r\n    <FormControl component=\"fieldset\">\r\n      <FormLabel component=\"legend\">Medication</FormLabel>\r\n      <FormGroup aria-label=\"medication\" name=\"medication1\">\r\n        {props.listMedications.map((medication) => {\r\n          if (medication.selected) {\r\n            return (\r\n              <>\r\n                <FormControlLabel\r\n                  key={medication.fireBaseId}\r\n                  label={medication.medicationName}\r\n                  control={\r\n                    <Checkbox\r\n                      onChange={medicationCheckboxHandler}\r\n                      name={medication.medicationName}\r\n                    />\r\n                  }\r\n                />\r\n                <form style={{ display: \"none\" }}>\r\n                  <TextField\r\n                    label=\"Dose\"\r\n                    type=\"number\"\r\n                    className={classes.dose}\r\n                    onChange={medicationDoseHandler}\r\n                  />\r\n                  <FormControl className={classes.formControl}>\r\n                    <InputLabel className={classes.formControlTitle}>\r\n                      Select an option\r\n                    </InputLabel>\r\n                    <Select\r\n                      native\r\n                      defaultValue=\"\"\r\n                      onChange={medicationEffectHandler}\r\n                    >\r\n                      <option aria-label=\"None\" value=\"\" />\r\n                      <option value={\"Better\"}>Better</option>\r\n                      <option value={\"No Change\"}>No Change</option>\r\n                      <option value={\"Worse\"}>Worse</option>\r\n                    </Select>\r\n                    <FormHelperText>\r\n                      How do you feel after taking the medication\r\n                    </FormHelperText>\r\n                  </FormControl>\r\n                </form>\r\n              </>\r\n            );\r\n          }\r\n          return null;\r\n        })}\r\n      </FormGroup>\r\n      <Button\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n        onClick={props.toMedicationMenu}\r\n        size={\"large\"}\r\n        className={classes.addButton}\r\n      >\r\n        EDIT MEDICATIONS\r\n      </Button>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default MedicationList;\r\n","import IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteTwoTone from \"@material-ui/icons/DeleteTwoTone\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport BorderColorTwoToneIcon from \"@material-ui/icons/BorderColorTwoTone\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport React from \"react\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Button,\r\n  Switch,\r\n  ButtonGroup,\r\n  FormControlLabel,\r\n  FormGroup,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  addBack: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\n/**\r\n * This component is used for the user to enable or disable existant medications.\r\n * It laso contains a path to addNew, Edit and Delete medications.\r\n */\r\n\r\nconst MedicationMenu = (props) => {\r\n  const classes = useStyles();\r\n\r\n  // Selects or De-selects the  medications shown in medicationList.js\r\n  const SelectedMedicationHandler = (event) => {\r\n    props.listMedications.forEach((medication) => {\r\n      if (medication.medicationName === event.target.name) {\r\n        medication.selected = !medication.selected;\r\n        props.getSelectedMedication(medication);\r\n      }\r\n    });\r\n  };\r\n  // Edits a current medication in MedicationMenu.js\r\n  const editMedicationHandler = (medicationToEdit) => {\r\n    props.swaptoMedicationEdit(medicationToEdit);\r\n  };\r\n\r\n  // Deletes a  medication in the MedicationMenu.js\r\n  const deleteMedicationHandler = (medicationToDelete) => {\r\n    props.getMedicationToDelete(medicationToDelete);\r\n  };\r\n\r\n  // Deletes a  medication in the MedicationMenu.js\r\n  const addMedicationHandler = () => {\r\n    props.swapToAddNewMedication();\r\n  };\r\n\r\n  return (\r\n    <FormControl component=\"fieldset\">\r\n      <FormLabel component=\"legend\">Medication Menu</FormLabel>\r\n      <FormGroup aria-label=\"medication\" name=\"medication1\">\r\n        {props.listMedications.map((medication) => {\r\n          return (\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justifyContent=\"space-between\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid xs={8}>\r\n                <FormControlLabel\r\n                  label={medication.medicationName}\r\n                  control={\r\n                    <Switch\r\n                      p={0.5}\r\n                      onChange={SelectedMedicationHandler}\r\n                      name={medication.medicationName}\r\n                      checked={medication.selected}\r\n                    />\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid xs={2}>\r\n                <IconButton\r\n                  aria-label=\"delete\"\r\n                  className={classes.margin}\r\n                  onClick={() => editMedicationHandler(medication)}\r\n                >\r\n                  <BorderColorTwoToneIcon fontSize=\"medium\" color=\"primary\" />\r\n                </IconButton>\r\n              </Grid>\r\n              <Grid xs={2}>\r\n                <IconButton\r\n                  aria-label=\"delete\"\r\n                  className={classes.margin}\r\n                  onClick={() => deleteMedicationHandler(medication)}\r\n                >\r\n                  <DeleteTwoTone fontSize=\"medium\" color=\"secondary\" />\r\n                </IconButton>\r\n              </Grid>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </FormGroup>\r\n      <Grid container direction=\"column\">\r\n        <Button\r\n          size=\"large\"\r\n          variant=\"contained\"\r\n          onClick={addMedicationHandler}\r\n          color=\"primary\"\r\n          className={classes.addBack}\r\n        >\r\n          Add New\r\n        </Button>\r\n        <Button\r\n          size=\"large\"\r\n          variant=\"contained\"\r\n          onClick={() => props.toMedicationList()}\r\n          className={classes.addBack}\r\n        >\r\n          Back\r\n        </Button>\r\n      </Grid>\r\n    </FormControl>\r\n  );\r\n};\r\nexport default MedicationMenu;\r\n","import React from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { TextField, Button, makeStyles } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  innerGrid: {\r\n    maxWidth: \"300px\",\r\n  },\r\n  addBack: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n/**\r\n * This component allows the user to edit a new medication to the\r\n * list in medicationMenu.js.\r\n */\r\nconst EditMedication = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const medicationToEditInput = useRef();\r\n\r\n  const editMedicationApplyHandler = () => {\r\n    props.medicationToEdit.medicationName = medicationToEditInput.current.value;\r\n    console.log(\"sup\", props.medicationToEdit);\r\n    props.editMedicationName(props.medicationToEdit);\r\n    props.toMedicationMenu();\r\n  };\r\n\r\n  return (\r\n    <Grid container direction=\"column\" className={classes.innerGrid}>\r\n      <TextField\r\n        inputRef={medicationToEditInput}\r\n        id=\"editLocation\"\r\n        type=\"text\"\r\n        aria-describedby=\"my-helper-text\"\r\n        autoFocus={true}\r\n        defaultValue={props.medicationToEdit.medicationName}\r\n        variant=\"filled\"\r\n      />\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        size=\"large\"\r\n        onClick={editMedicationApplyHandler}\r\n        className={classes.addBack}\r\n      >\r\n        Apply\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        size=\"large\"\r\n        onClick={() => props.toMedicationMenu()}\r\n        className={classes.addBack}\r\n      >\r\n        Cancel\r\n      </Button>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default EditMedication;\r\n","import React from \"react\";\r\nimport { useRef } from \"react\";\r\nimport {\r\n  TextField,\r\n  Button,\r\n  makeStyles,\r\n  Select,\r\n  FormControl,\r\n  InputLabel,\r\n} from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    paddingLeft: 20,\r\n    minWidth: 90,\r\n  },\r\n  formControlTitle: {\r\n    paddingLeft: 20,\r\n  },\r\n  dose: {\r\n    maxWidth: 300,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  innerGrid: {\r\n    maxWidth: \"350px\",\r\n  },\r\n  addBack: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\n/**\r\n * This component allows the user to add a new medication to the\r\n * list in medicationMenu.js.\r\n */\r\nconst AddNewMedication = (props) => {\r\n  const classes = useStyles();\r\n  const strengthToInput = useRef();\r\n  const measureToInput = useRef();\r\n  const medicationToAddInput = useRef();\r\n  const applyNewMedicationHandler = () => {\r\n    const medication = {\r\n      medicationName: `${medicationToAddInput.current.value} ${strengthToInput.current.value}${measureToInput.current.value}`,\r\n      selected: false,\r\n    };\r\n    props.addNewMedication(medication);\r\n    props.toMedicationMenu();\r\n  };\r\n\r\n  return (\r\n    <Grid container direction=\"column\" className={classes.innerGrid}>\r\n      <TextField\r\n        inputRef={medicationToAddInput}\r\n        id=\"editLocation\"\r\n        type=\"text\"\r\n        aria-describedby=\"my-helper-text\"\r\n        label=\"Add New Medication\"\r\n        autoFocus={true}\r\n        variant=\"filled\"\r\n      />\r\n      <form>\r\n        <TextField\r\n          id=\"strength\"\r\n          label=\"Strength\"\r\n          inputRef={strengthToInput}\r\n          className={classes.dose}\r\n        />\r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel\r\n            htmlFor=\"grouped-native-select\"\r\n            className={classes.formControlTitle}\r\n          >\r\n            Select\r\n          </InputLabel>\r\n          <Select\r\n            native\r\n            inputRef={measureToInput}\r\n            defaultValue=\"\"\r\n            id=\"measurement\"\r\n          >\r\n            <option aria-label=\"None\" value=\"\" />\r\n            <option value={\"mg\"}>mg</option>\r\n            <option value={\"%\"}>%</option>\r\n            <option value={\"µg\"}>µg</option>\r\n            <option value={\"g\"}>g</option>\r\n          </Select>\r\n        </FormControl>\r\n      </form>\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        size=\"large\"\r\n        onClick={applyNewMedicationHandler}\r\n        className={classes.addBack}\r\n      >\r\n        Apply\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        size=\"large\"\r\n        onClick={() => props.toMedicationMenu()}\r\n        className={classes.addBack}\r\n      >\r\n        Cancel\r\n      </Button>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default AddNewMedication;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport MedicationList from \"./MedicationList\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport Card from \"../../ui/Card\";\r\nimport MedicationMenu from \"./MedicationMenu\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport EditMedication from \"./EditMedication\";\r\nimport AddNewMedication from \"./AddNewMedication\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport OuterGrid from \"../../ui/OuterGrid\";\r\nimport AuthContext from \"../../../store/Auth-context\";\r\n\r\nconst Medication = (props) => {\r\n  const authCtx = useContext(AuthContext);\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // STATES\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // Shows  medication main page\r\n  const [medicationScreen, setMedicationScreen] = useState({\r\n    medicationList: true,\r\n    medicationMenu: false,\r\n    editMedication: false,\r\n    addMedication: false,\r\n    deleteMedication: false,\r\n  });\r\n\r\n  // boolean for the loading component\r\n  const [isloading, setIsloading] = useState(true);\r\n\r\n  // Ued to passes medication from medicationMenu.js to EditMedication.js\r\n  const [medicationToEdit, setMedicationToEdit] = useState();\r\n\r\n  // List of all body medications\r\n  const [listMedications, setListMedications] = useState([]);\r\n\r\n  // This state is used to re-render the page after selectedMedicationHandler\r\n  const [forceUpdate, setForceUpdate] = useState(0);\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // NAVIGATION FUNCTIONS\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // Swaps between medication main page and Add medication menu\r\n  const toMedicationMenuHandler = () => {\r\n    setMedicationScreen({\r\n      medicationList: false,\r\n      medicationMenu: true,\r\n      editMedication: false,\r\n      addMedication: false,\r\n      deleteMedication: false,\r\n    });\r\n  };\r\n\r\n  // Swaps between medication Menu and medication main page\r\n  const toMedicationListHandler = () => {\r\n    setMedicationScreen((prevState) => {\r\n      return { ...prevState, medicationList: true, medicationMenu: false };\r\n    });\r\n  };\r\n\r\n  // Swaps between medication Menu and Edit medication\r\n  const toMedicationEditHandler = (medicationToEdit) => {\r\n    setMedicationToEdit(medicationToEdit);\r\n    setMedicationScreen((prevState) => {\r\n      return { ...prevState, medicationMenu: false, editMedication: true };\r\n    });\r\n  };\r\n\r\n  // Swaps between medication Menu to add New Medication\r\n  const toAddNewMedicationHandler = (medicationToEdit) => {\r\n    setMedicationScreen((prevState) => {\r\n      return { ...prevState, medicationMenu: false, addMedication: true };\r\n    });\r\n  };\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // HTTP REQUESTS\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // PUT request to updates the 'selected' field of medications in Firebase\r\n  const selectedMedicationHandler = (selectedMedication) => {\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/medications/${selectedMedication.fireBaseId}.json`,\r\n      {\r\n        method: \"PUT\",\r\n        body: JSON.stringify(selectedMedication),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n    setForceUpdate(forceUpdate + 1);\r\n  };\r\n\r\n  // PUT request to updates the 'medicationName' field of medications in Firebase\r\n  const editMedicationNameHandler = (medicationToEdit) => {\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/medications/${medicationToEdit.fireBaseId}.json`,\r\n      {\r\n        method: \"PUT\",\r\n        body: JSON.stringify(medicationToEdit),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n  };\r\n\r\n  // POST new  medication to firebase\r\n  function addNewMedicationHandler(medicationToAdd) {\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/medications.json`,\r\n      {\r\n        method: \"POST\",\r\n        body: JSON.stringify(medicationToAdd),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    ).then((response) => {\r\n      getMedicationList();\r\n    });\r\n  }\r\n\r\n  // DELETE request to delete a  medications in Firebase\r\n  const medicationToDeleteHandler = (medicationToDelete) => {\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/medications/${medicationToDelete.fireBaseId}.json`,\r\n      { method: \"DELETE\" }\r\n    ).then((response) => {\r\n      getMedicationList();\r\n    });\r\n  };\r\n\r\n  // GET request to Firebase for  medication list and updates state with it.\r\n  const getMedicationList = () => {\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/medications.json`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const listMedications = [];\r\n\r\n        for (const key in data) {\r\n          const medication = {\r\n            fireBaseId: key,\r\n            ...data[key],\r\n          };\r\n          listMedications.push(medication);\r\n        }\r\n        setListMedications(listMedications);\r\n        setIsloading(false);\r\n      });\r\n  };\r\n\r\n  // GET request for the list of medications when Page loads for the first time.\r\n  useEffect(() => {\r\n    getMedicationList();\r\n  }, []);\r\n\r\n  // Shows a loader while the Fetching\r\n  if (isloading) {\r\n    return <CircularProgress />;\r\n  }\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // RETURN\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  return (\r\n    <OuterGrid>\r\n      {medicationScreen.medicationList && (\r\n        <>\r\n          <MedicationList\r\n            listMedications={listMedications}\r\n            getMedication={props.getMedication}\r\n            toMedicationMenu={toMedicationMenuHandler}\r\n          />\r\n        </>\r\n      )}\r\n      {medicationScreen.medicationMenu && (\r\n        <>\r\n          <MedicationMenu\r\n            listMedications={listMedications}\r\n            toMedicationList={toMedicationListHandler}\r\n            getSelectedMedication={selectedMedicationHandler}\r\n            swaptoMedicationEdit={toMedicationEditHandler}\r\n            swapToAddNewMedication={toAddNewMedicationHandler}\r\n            getMedicationToDelete={medicationToDeleteHandler}\r\n          />\r\n        </>\r\n      )}\r\n      {medicationScreen.editMedication && (\r\n        <EditMedication\r\n          toMedicationMenu={toMedicationMenuHandler}\r\n          editMedicationName={editMedicationNameHandler}\r\n          medicationToEdit={medicationToEdit}\r\n          toMedicationMenu={toMedicationMenuHandler}\r\n        />\r\n      )}\r\n      {medicationScreen.addMedication && (\r\n        <AddNewMedication\r\n          toMedicationMenu={toMedicationMenuHandler}\r\n          addNewMedication={addNewMedicationHandler}\r\n          toMedicationMenu={toMedicationMenuHandler}\r\n        />\r\n      )}\r\n    </OuterGrid>\r\n  );\r\n};\r\n\r\nexport default Medication;\r\n","import React from \"react\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Checkbox,\r\n  FormControlLabel,\r\n  FormGroup,\r\n  Select,\r\n  makeStyles,\r\n  InputLabel,\r\n  FormHelperText,\r\n  Button,\r\n} from \"@material-ui/core\";\r\nexport const entryTreatments = [];\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    paddingLeft: 20,\r\n    maxWidth: 300,\r\n  },\r\n  formControlTitle: {\r\n    paddingLeft: 20,\r\n  },\r\n  dose: {\r\n    maxWidth: 80,\r\n  },\r\n  addButton: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n/**\r\n * This component allows a user to choose the treatment used to alliviate\r\n * the pain. Only user selected treatment appear in the list.\r\n * Selected treatment are sent to the painEntries.js for submission\r\n */\r\nconst TreatmentList = (props) => {\r\n  const classes = useStyles();\r\n  // Updates the treatment list that is sent to PainEntries.js\r\n  const treatmentCheckboxHandler = (event) => {\r\n    const treatmentIndex = entryTreatments.findIndex(\r\n      (tret) => tret.treatmentName === event.target.name\r\n    );\r\n\r\n    if (treatmentIndex === -1) {\r\n      entryTreatments.push({\r\n        treatmentName: event.target.name,\r\n        effect: \"\",\r\n      });\r\n      event.target.parentElement.parentElement.parentElement.nextSibling.setAttribute(\r\n        \"style\",\r\n        \"display: inline;\"\r\n      );\r\n    } else {\r\n      entryTreatments.splice(treatmentIndex, 1);\r\n      event.target.parentElement.parentElement.parentElement.nextSibling.setAttribute(\r\n        \"style\",\r\n        \"display: none;\"\r\n      );\r\n    }\r\n    props.getTreatment(entryTreatments);\r\n  };\r\n\r\n  // Adds effect after medicine to the corresponding medicine\r\n  const treatmentEffectHandler = (event) => {\r\n    for (let i = 0; i < entryTreatments.length; i++) {\r\n      if (\r\n        entryTreatments[i].treatmentName ===\r\n        event.target.parentElement.parentElement.parentElement.previousSibling\r\n          .innerText\r\n      ) {\r\n        entryTreatments[i].effect = event.target.value;\r\n      }\r\n    }\r\n    props.getTreatment(entryTreatments);\r\n  };\r\n\r\n  // swaps forward to the next page\r\n  const toTreatmentHandler = () => {\r\n    // Sends updated list to PainEntries for submition\r\n    props.getTreatment(entryTreatments);\r\n  };\r\n\r\n  return (\r\n    <FormControl component=\"fieldset\">\r\n      <FormLabel component=\"legend\">Treatment</FormLabel>\r\n      <FormGroup aria-label=\"treatment\" name=\"treatment1\">\r\n        {props.listTreatments.map((treatment) => {\r\n          if (treatment.selected) {\r\n            return (\r\n              <>\r\n                <FormControlLabel\r\n                  key={treatment.fireBaseId}\r\n                  label={treatment.treatmentName}\r\n                  control={\r\n                    <Checkbox\r\n                      onChange={treatmentCheckboxHandler}\r\n                      name={treatment.treatmentName}\r\n                    />\r\n                  }\r\n                />\r\n                <form style={{ display: \"none\" }}>\r\n                  <FormControl className={classes.formControl}>\r\n                    <InputLabel className={classes.formControlTitle}>\r\n                      Select an option\r\n                    </InputLabel>\r\n                    <Select\r\n                      native\r\n                      defaultValue=\"\"\r\n                      onChange={treatmentEffectHandler}\r\n                    >\r\n                      <option aria-label=\"None\" value=\"\" />\r\n                      <option value={\"Better\"}>Better</option>\r\n                      <option value={\"No Change\"}>No Change</option>\r\n                      <option value={\"Worse\"}>Worse</option>\r\n                    </Select>\r\n                    <FormHelperText>\r\n                      How do you feel after the treatment\r\n                    </FormHelperText>\r\n                  </FormControl>\r\n                </form>\r\n              </>\r\n            );\r\n          }\r\n          return null;\r\n        })}\r\n      </FormGroup>\r\n      <Button\r\n        color=\"primary\"\r\n        size={\"large\"}\r\n        variant=\"contained\"\r\n        onClick={props.toTreatmentMenu}\r\n        className={classes.addButton}\r\n      >\r\n        EDIT TREATMENTS\r\n      </Button>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nexport default TreatmentList;\r\n","import IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteTwoTone from \"@material-ui/icons/DeleteTwoTone\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport BorderColorTwoToneIcon from \"@material-ui/icons/BorderColorTwoTone\";\r\nimport React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Button,\r\n  Switch,\r\n  FormControlLabel,\r\n  FormGroup,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  addBack: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n}));\r\n/**\r\n * This component is used for the user to enable or disable existant treatments.\r\n * It also contains a path to addNew, Edit and Delete treatments.\r\n */\r\nconst TreatmentMenu = (props) => {\r\n  const classes = useStyles();\r\n\r\n  // Selects or De-selects the  treatments shown in treatmentList.js\r\n  const SelectedTreatmentHandler = (event) => {\r\n    props.listTreatments.forEach((treatment) => {\r\n      if (treatment.treatmentName === event.target.name) {\r\n        treatment.selected = !treatment.selected;\r\n        props.getSelectedTreatment(treatment);\r\n      }\r\n    });\r\n  };\r\n  // Edits a current treatment in TreatmentMenu.js\r\n  const editTreatmentHandler = (treatmentToEdit) => {\r\n    props.swaptoTreatmentEdit(treatmentToEdit);\r\n  };\r\n\r\n  // Deletes a  treatment in the TreatmentMenu.js\r\n  const deleteTreatmentHandler = (treatmentToDelete) => {\r\n    props.getTreatmentToDelete(treatmentToDelete);\r\n  };\r\n\r\n  // Deletes a  treatment in the TreatmentMenu.js\r\n  const addTreatmentHandler = () => {\r\n    props.swapToAddNewTreatment();\r\n  };\r\n\r\n  return (\r\n    <FormControl component=\"fieldset\">\r\n      <FormLabel component=\"legend\">Treatment Menu</FormLabel>\r\n      <FormGroup aria-label=\"treatment\" name=\"treatment1\">\r\n        {props.listTreatments.map((treatment) => {\r\n          return (\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justifyContent=\"space-between\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid xs={8}>\r\n                <FormControlLabel\r\n                  label={treatment.treatmentName}\r\n                  control={\r\n                    <Switch\r\n                      p={0.5}\r\n                      onChange={SelectedTreatmentHandler}\r\n                      name={treatment.treatmentName}\r\n                      checked={treatment.selected}\r\n                    />\r\n                  }\r\n                />\r\n              </Grid>\r\n              <Grid xs={2}>\r\n                <IconButton\r\n                  aria-label=\"delete\"\r\n                  className={classes.margin}\r\n                  onClick={() => editTreatmentHandler(treatment)}\r\n                >\r\n                  <BorderColorTwoToneIcon fontSize=\"medium\" color=\"primary\" />\r\n                </IconButton>\r\n              </Grid>\r\n              <Grid xs={2}>\r\n                <IconButton\r\n                  aria-label=\"delete\"\r\n                  className={classes.margin}\r\n                  onClick={() => deleteTreatmentHandler(treatment)}\r\n                >\r\n                  <DeleteTwoTone fontSize=\"medium\" color=\"secondary\" />\r\n                </IconButton>\r\n              </Grid>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </FormGroup>\r\n      <Grid container direction=\"column\">\r\n        <Button\r\n          size=\"large\"\r\n          variant=\"contained\"\r\n          onClick={addTreatmentHandler}\r\n          color=\"primary\"\r\n          className={classes.addBack}\r\n        >\r\n          Add New\r\n        </Button>\r\n        <Button\r\n          variant=\"contained\"\r\n          onClick={props.toTreatmentList}\r\n          className={classes.addBack}\r\n        >\r\n          Back\r\n        </Button>\r\n      </Grid>\r\n    </FormControl>\r\n  );\r\n};\r\nexport default TreatmentMenu;\r\n","import React from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { TextField, Button, makeStyles } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  innerGrid: {\r\n    maxWidth: \"300px\",\r\n  },\r\n  addBack: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n/**\r\n * This component allows the user to edit a new treatment to the\r\n * list in treatmentMenu.js.\r\n */\r\nconst EditTreatment = (props) => {\r\n  const classes = useStyles();\r\n\r\n  const treatmentToEditInput = useRef();\r\n\r\n  const editTreatmentApplyHandler = () => {\r\n    props.treatmentToEdit.treatmentName = treatmentToEditInput.current.value;\r\n    console.log(`undefine?`, props.treatmentToEdit);\r\n    props.editTreatmentName(props.treatmentToEdit);\r\n    props.toTreatmentMenu();\r\n  };\r\n\r\n  return (\r\n    <Grid container direction=\"column\" className={classes.innerGrid}>\r\n      <TextField\r\n        inputRef={treatmentToEditInput}\r\n        id=\"editLocation\"\r\n        type=\"text\"\r\n        aria-describedby=\"my-helper-text\"\r\n        autoFocus={true}\r\n        defaultValue={props.treatmentToEdit.treatmentName}\r\n        variant=\"filled\"\r\n      />\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        size=\"large\"\r\n        onClick={editTreatmentApplyHandler}\r\n        className={classes.addBack}\r\n      >\r\n        Apply\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        size=\"large\"\r\n        onClick={() => props.toTreatmentMenu()}\r\n        className={classes.addBack}\r\n      >\r\n        Cancel\r\n      </Button>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default EditTreatment;\r\n","import React from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { TextField, Button, makeStyles } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  innerGrid: {\r\n    maxWidth: \"300px\",\r\n  },\r\n  addBack: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\n/**\r\n * This component allows the user to add a new treatment to the\r\n * list in treatmentMenu.js.\r\n */\r\nconst AddNewTreatment = (props) => {\r\n  const classes = useStyles();\r\n  const treatmentToAddInput = useRef();\r\n  const applyNewTreatmentHandler = () => {\r\n    const treatment = {\r\n      treatmentName: treatmentToAddInput.current.value,\r\n      selected: false,\r\n    };\r\n    props.addNewTreatment(treatment);\r\n    props.toTreatmentMenu();\r\n  };\r\n\r\n  return (\r\n    <Grid container direction=\"column\" className={classes.innerGrid}>\r\n      <TextField\r\n        inputRef={treatmentToAddInput}\r\n        id=\"editLocation\"\r\n        type=\"text\"\r\n        aria-describedby=\"my-helper-text\"\r\n        label=\"Add New Location\"\r\n        autoFocus={true}\r\n        variant=\"filled\"\r\n      />\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        size=\"large\"\r\n        onClick={applyNewTreatmentHandler}\r\n        className={classes.addBack}\r\n      >\r\n        Apply\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        size=\"large\"\r\n        onClick={() => props.toTreatmentMenu()}\r\n        className={classes.addBack}\r\n      >\r\n        Cancel\r\n      </Button>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default AddNewTreatment;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport TreatmentList from \"./TreatmentList\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport Card from \"../../ui/Card\";\r\nimport TreatmentMenu from \"./TreatmentMenu\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport EditTreatment from \"./EditTreatment\";\r\nimport AddNewTreatment from \"./AddNewTreatment\";\r\nimport AuthContext from \"../../../store/Auth-context\";\r\nimport { useContext } from \"react\";\r\n\r\nconst Treatment = (props) => {\r\n  const authCtx = useContext(AuthContext);\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // STATES\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // Shows  treatment main page\r\n  const [treatmentScreen, setTreatmentScreen] = useState({\r\n    treatmentList: true,\r\n    treatmentMenu: false,\r\n    editTreatment: false,\r\n    addTreatment: false,\r\n    deleteTreatment: false,\r\n  });\r\n\r\n  // Ued to passes treatment from treatmentMenu.js to EditTreatment.js\r\n  const [treatmentToEdit, setTreatmentToEdit] = useState();\r\n\r\n  // List of all body treatments\r\n  const [listTreatments, setListTreatments] = useState([]);\r\n\r\n  // This state is used to re-render the page after selectedTreatmentHandler\r\n  const [forceUpdate, setForceUpdate] = useState(0);\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // NAVIGATION FUNCTIONS\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // Swaps between treatment main page and Add treatment menu\r\n  const toTreatmentMenuHandler = () => {\r\n    setTreatmentScreen({\r\n      treatmentList: false,\r\n      treatmentMenu: true,\r\n      editTreatment: false,\r\n      addTreatment: false,\r\n      deleteTreatment: false,\r\n    });\r\n  };\r\n\r\n  // Swaps between treatment Menu and treatment main page\r\n  const toTreatmentListHandler = () => {\r\n    setTreatmentScreen((prevState) => {\r\n      return { ...prevState, treatmentList: true, treatmentMenu: false };\r\n    });\r\n  };\r\n\r\n  // Swaps between treatment Menu and Edit treatment\r\n  const toTreatmentEditHandler = (treatmentToEdit) => {\r\n    setTreatmentToEdit(treatmentToEdit);\r\n    setTreatmentScreen((prevState) => {\r\n      return { ...prevState, treatmentMenu: false, editTreatment: true };\r\n    });\r\n  };\r\n\r\n  // Swaps between treatment Menu to add New Treatment\r\n  const toAddNewTreatmentHandler = (treatmentToEdit) => {\r\n    setTreatmentScreen((prevState) => {\r\n      return { ...prevState, treatmentMenu: false, addTreatment: true };\r\n    });\r\n  };\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // HTTP REQUESTS\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // PUT request to updates the 'selected' field of treatments in Firebase\r\n  const selectedTreatmentHandler = (selectedTreatment) => {\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/treatments/${selectedTreatment.fireBaseId}.json`,\r\n      {\r\n        method: \"PUT\",\r\n        body: JSON.stringify(selectedTreatment),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n    setForceUpdate(forceUpdate + 1);\r\n  };\r\n\r\n  // PUT request to updates the 'treatmentName' field of treatments in Firebase\r\n  const editTreatmentNameHandler = (treatmentToEdit) => {\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/treatments/${treatmentToEdit.fireBaseId}.json`,\r\n      {\r\n        method: \"PUT\",\r\n        body: JSON.stringify(treatmentToEdit),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n  };\r\n\r\n  // POST new  treatment to firebase\r\n  function addNewTreatmentHandler(treatmentToAdd) {\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/treatments.json`,\r\n      {\r\n        method: \"POST\",\r\n        body: JSON.stringify(treatmentToAdd),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    ).then((response) => {\r\n      getTreatmentList();\r\n    });\r\n  }\r\n\r\n  // DELETE request to delete a  treatments in Firebase\r\n  const treatmentToDeleteHandler = (treatmentToDelete) => {\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/treatments/${treatmentToDelete.fireBaseId}.json`,\r\n      { method: \"DELETE\" }\r\n    ).then((response) => {\r\n      getTreatmentList();\r\n    });\r\n  };\r\n\r\n  // GET request to Firebase for  treatment list and updates state with it.\r\n  const getTreatmentList = () => {\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/treatments.json`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const listTreatments = [];\r\n\r\n        for (const key in data) {\r\n          const treatment = {\r\n            fireBaseId: key,\r\n            ...data[key],\r\n          };\r\n          listTreatments.push(treatment);\r\n        }\r\n        setListTreatments(listTreatments);\r\n      });\r\n  };\r\n\r\n  // GET request for the list of treatments when Page loads for the first time.\r\n  useEffect(() => {\r\n    getTreatmentList();\r\n  }, []);\r\n  ///////////////////////////////////////////////////////////////////////////////\r\n  // RETURN\r\n  ///////////////////////////////////////////////////////////////////////////////\r\n  return (\r\n    <>\r\n      {treatmentScreen.treatmentList && (\r\n        <>\r\n          <TreatmentList\r\n            listTreatments={listTreatments}\r\n            getTreatment={props.getTreatment}\r\n            submitMedication={props.submitMedication}\r\n            toTreatmentMenu={toTreatmentMenuHandler}\r\n          />\r\n        </>\r\n      )}\r\n      {treatmentScreen.treatmentMenu && (\r\n        <>\r\n          <TreatmentMenu\r\n            listTreatments={listTreatments}\r\n            getSelectedTreatment={selectedTreatmentHandler}\r\n            toTreatmentList={toTreatmentListHandler}\r\n            swaptoTreatmentEdit={toTreatmentEditHandler}\r\n            swapToAddNewTreatment={toAddNewTreatmentHandler}\r\n            getTreatmentToDelete={treatmentToDeleteHandler}\r\n          />\r\n        </>\r\n      )}\r\n      {treatmentScreen.editTreatment && (\r\n        <EditTreatment\r\n          toTreatmentMenu={toTreatmentMenuHandler}\r\n          editTreatmentName={editTreatmentNameHandler}\r\n          treatmentToEdit={treatmentToEdit}\r\n        />\r\n      )}\r\n      {treatmentScreen.addTreatment && (\r\n        <AddNewTreatment\r\n          toTreatmentMenu={toTreatmentMenuHandler}\r\n          addNewTreatment={addNewTreatmentHandler}\r\n          toTreatmentMenu={toTreatmentMenuHandler}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Treatment;\r\n","import React from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { entryTreatments } from \"./treatment/TreatmentList\";\r\nimport { entryMedications } from \"./medication/MedicationList\";\r\nimport { Button, TextField, Grid, makeStyles } from \"@material-ui/core\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  textBox: {\r\n    minWidth: 400,\r\n  },\r\n  submitButton: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n  extraComments: {\r\n    padding: theme.spacing(4),\r\n    paddingTop: theme.spacing(6),\r\n  },\r\n}));\r\n/**\r\n * This is components records extra comments that a user wishes to add.\r\n */\r\nconst ExtraComments = (props) => {\r\n  const classes = useStyles();\r\n  const commentToAddInput = useRef();\r\n\r\n  // Submits the extra comments and entire pain entry form.\r\n  const submitPainEntryHandler = () => {\r\n    const comment = commentToAddInput.current.value;\r\n    // swaps forward to the next page\r\n    props.getComment(comment);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        alignItems=\"center\"\r\n        className={classes.extraComments}\r\n      >\r\n        <TextField\r\n          className={classes.textBox}\r\n          id=\"filled-multiline-static\"\r\n          label=\"Extra Comments\"\r\n          autoFocus={true}\r\n          variant=\"filled\"\r\n          multiline\r\n          inputRef={commentToAddInput}\r\n          rows={4}\r\n        />\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"primary\"\r\n          size=\"large\"\r\n          onClick={submitPainEntryHandler}\r\n          className={classes.submitButton}\r\n        >\r\n          Submit\r\n        </Button>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ExtraComments;\r\n","import React, { useState, useCallback, useContext } from \"react\";\r\nimport DatePicker from \"../components/EntriePageComponents/DatePicker\";\r\nimport PainScale from \"../components/EntriePageComponents/PainScale\";\r\nimport { Container, Typography, makeStyles, Button } from \"@material-ui/core\";\r\nimport Location from \"../components/EntriePageComponents/location/Location\";\r\nimport Medication from \"../components/EntriePageComponents/medication/Medication\";\r\nimport Treatment from \"../components/EntriePageComponents/treatment/Treatment\";\r\nimport ExtraComments from \"../components/EntriePageComponents/ExtraComments\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Card from \"../components/ui/Card\";\r\nimport ChevronLeftTwoToneIcon from \"@material-ui/icons/ChevronLeftTwoTone\";\r\nimport ChevronRightTwoToneIcon from \"@material-ui/icons/ChevronRightTwoTone\";\r\nimport { PAGESWAPTITLES } from \"../components/EntriePageComponents/PainEntriesPainRangeText\";\r\nimport AuthContext from \"../store/Auth-context\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"center\",\r\n  },\r\n  swapBar: {\r\n    marginLeft: theme.spacing(4.2),\r\n    marginRight: theme.spacing(4.2),\r\n  },\r\n}));\r\n\r\nconst PainEntries = () => {\r\n  const classes = useStyles();\r\n\r\n  const authCtx = useContext(AuthContext);\r\n\r\n  // -----------STATES-------------\r\n  const [painEntry, setPainEntry] = useState({\r\n    date: {},\r\n    painLocation: [],\r\n    painScale: 0,\r\n    medicine: [],\r\n    treatment: [],\r\n    comments: \"\",\r\n  });\r\n\r\n  const [pageSwap, setPageSwap] = useState(0);\r\n\r\n  // -----------UPDATE HANDLERS-------------\r\n\r\n  const updateDateTimeHandler = useCallback((EntryDateAndTime) => {\r\n    setPainEntry((prevState) => {\r\n      return { ...prevState, date: EntryDateAndTime };\r\n    });\r\n  }, []);\r\n\r\n  const updatePainLocationHandler = (entryLocations) => {\r\n    setPainEntry((prevState) => {\r\n      return { ...prevState, painLocation: entryLocations };\r\n    });\r\n  };\r\n\r\n  const updatePainScaleHandler = (entryPainScale) => {\r\n    setPainEntry((prevState) => {\r\n      return { ...prevState, painScale: entryPainScale };\r\n    });\r\n  };\r\n\r\n  const updateMedicationHandler = (entryMedicine) => {\r\n    setPainEntry((prevState) => {\r\n      return { ...prevState, medicine: entryMedicine };\r\n    });\r\n  };\r\n\r\n  const updateTreatmentHandler = (entryTreatment) => {\r\n    setPainEntry((prevState) => {\r\n      return { ...prevState, treatment: entryTreatment };\r\n    });\r\n  };\r\n\r\n  const updatePainCommentsHandler = (entryComments) => {\r\n    painEntry.comments = entryComments;\r\n    sendPainEntryToFirebase(painEntry);\r\n  };\r\n\r\n  // Sends the painEntry to firebase\r\n  function sendPainEntryToFirebase(painEntry) {\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/pain-entries.json`,\r\n      {\r\n        method: \"POST\",\r\n        body: JSON.stringify(painEntry),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    ).then((res) => {\r\n      setPainEntry({\r\n        date: {},\r\n        painLocation: [],\r\n        painScale: 0,\r\n        medicine: [],\r\n        treatment: [],\r\n        comments: \"\",\r\n      });\r\n    });\r\n    setPageSwap(0);\r\n    window.location.reload(false);\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Grid container>\r\n        <Card newStyle={{ marginTop: \"4rem\" }}>\r\n          <Grid item xs={12}>\r\n            <Typography align=\"center\" display=\"block\" variant=\"h4\">\r\n              {PAGESWAPTITLES[pageSwap].question}\r\n            </Typography>\r\n          </Grid>\r\n        </Card>\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justifyContent=\"space-between\"\r\n          alignItems=\"center\"\r\n          className={classes.swapBar}\r\n        >\r\n          <Button\r\n            size=\"large\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={pageSwap === 0}\r\n            startIcon={<ChevronLeftTwoToneIcon />}\r\n            onClick={() =>\r\n              setPageSwap((prevState) => {\r\n                return prevState - 1;\r\n              })\r\n            }\r\n          >\r\n            Back\r\n          </Button>\r\n          <Typography variant=\"h4\">{PAGESWAPTITLES[pageSwap].title}</Typography>\r\n          <Button\r\n            size=\"large\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            disabled={pageSwap === 5}\r\n            endIcon={<ChevronRightTwoToneIcon />}\r\n            onClick={() =>\r\n              setPageSwap((prevState) => {\r\n                return prevState + 1;\r\n              })\r\n            }\r\n          >\r\n            Next\r\n          </Button>\r\n        </Grid>\r\n        <Card>\r\n          <Grid item xs={12} className={classes.container}>\r\n            {pageSwap === 0 && (\r\n              <DatePicker\r\n                getDateTime={updateDateTimeHandler}\r\n                currentDateTime={painEntry.date}\r\n              />\r\n            )}\r\n            {pageSwap === 1 && (\r\n              <Location getPainLocation={updatePainLocationHandler} />\r\n            )}\r\n            {pageSwap === 2 && (\r\n              <PainScale getPainScaleValue={updatePainScaleHandler} />\r\n            )}\r\n            {pageSwap === 3 && (\r\n              <Medication getMedication={updateMedicationHandler} />\r\n            )}\r\n            {pageSwap === 4 && (\r\n              <Treatment getTreatment={updateTreatmentHandler} />\r\n            )}\r\n            {pageSwap === 5 && (\r\n              <ExtraComments getComment={updatePainCommentsHandler} />\r\n            )}\r\n          </Grid>\r\n        </Card>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default PainEntries;\r\n","import React from \"react\";\r\nimport {\r\n  Accordion,\r\n  AccordionSummary,\r\n  Typography,\r\n  AccordionDetails,\r\n  Badge,\r\n  makeStyles,\r\n} from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  heading: {\r\n    fontWeight: theme.typography.fontWeightBold,\r\n  },\r\n  accordion: {\r\n    width: \"100%\",\r\n    display: \"block\",\r\n  },\r\n  accordionText: {\r\n    marginLeft: theme.spacing(1),\r\n    marginBottom: theme.spacing(4),\r\n  },\r\n  mainAccordion: {\r\n    backgroundColor: ({ accordionColor }) => accordionColor,\r\n  },\r\n}));\r\n\r\nconst CustomizedAccordion = (props) => {\r\n  const classes = useStyles({ accordionColor: props.accordionColor });\r\n\r\n  const [expanded, setExpanded] = React.useState(false);\r\n\r\n  const handleChange = (panel) => (event, isExpanded) => {\r\n    setExpanded(isExpanded ? panel : false);\r\n  };\r\n\r\n  return (\r\n    <Accordion\r\n      className={classes.mainAccordion}\r\n      expanded={expanded === props.panel}\r\n      onChange={handleChange(props.panel)}\r\n    >\r\n      <AccordionSummary\r\n        expandIcon={<ExpandMoreIcon />}\r\n        aria-controls=\"panel1a-content\"\r\n        id=\"panel1a-header\"\r\n      >\r\n        <Badge\r\n          color=\"secondary\"\r\n          badgeContent={4}\r\n          variant=\"dot\"\r\n          invisible={!props.showBadge}\r\n        >\r\n          <Typography variant=\"h5\" className={classes.heading}>\r\n            {props.accordionTitle}\r\n          </Typography>\r\n        </Badge>\r\n      </AccordionSummary>\r\n      <AccordionDetails>\r\n        <Grid container direction=\"column\">\r\n          <Typography variant=\"body1\" className={classes.accordionText}>\r\n            {props.bodyText}\r\n          </Typography>\r\n          <main>{props.children}</main>\r\n        </Grid>\r\n      </AccordionDetails>\r\n    </Accordion>\r\n  );\r\n};\r\n\r\nexport default CustomizedAccordion;\r\n","import React from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  textMargin: {\r\n    marginLeft: theme.spacing(4),\r\n    marginRight: theme.spacing(4),\r\n    marginBottom: theme.spacing(4),\r\n  },\r\n  title: {\r\n    fontWeight: theme.typography.fontWeightMedium,\r\n  },\r\n  subTitle1: {\r\n    color: \"#1c4966\",\r\n  },\r\n  subTitle2: {\r\n    color: \"#296d98\",\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n}));\r\nconst UserGuideFormat = (props) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <>\r\n      {props.userGuideText.map((text) => {\r\n        return (\r\n          <Grid className={classes.textMargin}>\r\n            <Typography variant=\"h5\" className={classes.title}>\r\n              {text.title}\r\n            </Typography>\r\n            <Typography variant=\"h5\" className={classes.subTitle1}>\r\n              {text.subTitle1}\r\n            </Typography>\r\n            <Typography variant=\"h6\" className={classes.subTitle2}>\r\n              {text.subTitle2}\r\n            </Typography>\r\n            <Typography variant=\"body1\">{text.description}</Typography>\r\n          </Grid>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserGuideFormat;\r\n","export const userGuide = {\r\n  userGuideDesc:\r\n    \"This user guide includes an explanation for each of the screens found on the bottom menu. Each explanation includes screen functionality\" +\r\n    \"and step by step instructions on how to perform them. Click the arrows to expand each of the explanations for each screen an d scroll down to read the\" +\r\n    \"full text.\",\r\n  entries: [\r\n    {\r\n      description:\r\n        'In this screen the user can record current or past pain episodes. To start a new pain entry select the date a click \"Next',\r\n    },\r\n    {\r\n      title: \"Date and Time\",\r\n      description:\r\n        \"In this screen, the user can select the date on which the pain episode occurred. On the calendar component, \" +\r\n        \"at the top of the calendar, the user can select the month and year by pressing the directional arrows\",\r\n    },\r\n    {\r\n      title: \"Pain Location\",\r\n      description:\r\n        'Initially, this screen will be empty. The user will have to click \"ADD LOCATIONS\" and then click on \"ADD NEW\" and type the location in the body where the pain is felt. \\n' +\r\n        \"The User can choose to 'edit' or 'delete' an added location by clicking on the 'pen' or 'bin' icon. \\n The user can enable or disable a body location so that\" +\r\n        \"It appears in the main screen\",\r\n    },\r\n    {\r\n      title: \"Pain Scale\",\r\n      description:\r\n        'The user can use the vertical scale to select the intensity of the pain between 0-10. 0 stands for \"no pain\", and 10 stands for the \"worst pain imaginable\".' +\r\n        \"Every time the user picks a different level of intensity, a description corresponding to that intensity will be shown. Descriptions are meant to help\" +\r\n        \"the user choose the accurate intensity of the pain.\",\r\n    },\r\n    {\r\n      title: \"Medication\",\r\n      description:\r\n        'Initially, this screen will be empty. The user will have to click \"ADD MEDICATION\" and then click on \"ADD NEW\" and type the medication taken to ease the pain. \\n' +\r\n        \"The user can choose to 'edit' or 'delete' an added medication by clicking on the 'pen' or 'bin' icon. \\n The user can enable or disable a medication so that\" +\r\n        \"It appears in the main screen\",\r\n    },\r\n    {\r\n      title: \"Treatments\",\r\n      description:\r\n        'Initially, this screen will be empty. The user will have to click \"ADD TREATMENTS\" and then click on \"ADD NEW\" and type the treatment taken to ease the pain. \\n' +\r\n        \"The user can choose to 'edit' or 'delete' an added treatment by clicking on the 'pen' or 'bin' icon. \\n The user can enable or disable a treatment so that\" +\r\n        \"It appears in the main screen\",\r\n    },\r\n    {\r\n      title: \"Extra Comments\",\r\n      description:\r\n        \"The user can write additional comments about the pain episode. Once the user has finished writing, he can press the submit button at the bottom to conclude the pain entry form currently recorded.\",\r\n    },\r\n  ],\r\n  stats: [\r\n    {\r\n      description:\r\n        \"The user can view insightful information about the pain and how certain factors such as medicine or treatments relate to it.\\n\" +\r\n        \"There are seven charts that display information about the pain. Each chart has a title explaining its purpose and an informational\" +\r\n        'tooltip (\"Icon\") explaining how to understand it. Explanations of these charts can also be found below.',\r\n    },\r\n    {\r\n      title: \"Pain Intensity - Scale Frequency\",\r\n      description:\r\n        \"This chart shows the total amount of times a user has recorded a pain episode. The intensity level recorded during an episode has been distributed\" +\r\n        \"across five different pain categories. This chart can keep a user accountable for the number of entries recorded. It also helps to have a general\" +\r\n        \"understanding and classify their overall pain severity.\",\r\n    },\r\n    {\r\n      title: \"Pain Intensity - Time Periods\",\r\n      description:\r\n        \"This chart shows the average pain level and pain occurrences across four-time categories. Each category represents a range of times in a day. \\n\" +\r\n        \"This chart helps to understand at what time throughout the day the pain is most severe. This user can use this to find trends, \" +\r\n        \"e.g.(when the pain was most or less severe) by investigating the habits during those periods, enabling them to adopt better or discontinue poor habits.\",\r\n    },\r\n    {\r\n      title: \"Pain Location\",\r\n      description:\r\n        \"This chart shows the number of times a body location has been selected when filling a pain entry form. It also shows the most prevalent body\" +\r\n        \"location affected by the pain. \\n This chart helps the user to understand the parts of their body which are commonly affected by the pain, \" +\r\n        \"enabling them to choose the proper medication and treatment to mitigate the pain.\",\r\n    },\r\n    {\r\n      title: \"Negative Effect\",\r\n      description:\r\n        'This chart shows the number of times a pain mitigation method was classified as \"worse\" when filling a pain entry form. It also shows which' +\r\n        \"methods have the most harmful results when treating the pain. \\n This chart can help the user to keep accountability of how many times a method\" +\r\n        \"has been utilized. It also helps the user to recognize which methods are not suitable for them and must be discontinued.\",\r\n    },\r\n    {\r\n      title: \"Positive Effect\",\r\n      description:\r\n        'This chart shows the number of times a pain mitigation method was classified as \"Better\" when filling a pain entry form. It also shows which' +\r\n        \"methods have the most beneficial results when treating the pain. \\n This chart can help the user to keep accountability of how many times a \" +\r\n        \"method has been utilized. It also helps the user recognize which methods have worked in the past and should not be abandoned.\",\r\n    },\r\n    {\r\n      title: \"Ineffectual Factors\",\r\n      description:\r\n        'This chart shows the number of times a pain mitigation method was classified as \"No change\" when filling a pain entry form. It also shows ' +\r\n        \"which methods have no effects when treating the pain. \\n This chart can help the user to keep accountability of how many times a method has\" +\r\n        \"been utilized. It also helps the user to recognize which methods are ineffective for them could be discontinued.\",\r\n    },\r\n  ],\r\n  records: [\r\n    {\r\n      description:\r\n        \"The user can scroll down to see past logs corresponding to the current month. If the user wants to check a previous month,\" +\r\n        \"he can interact with the date-changer at the top of the screen, which allows him to select previous months by clicking on the arrows.\" +\r\n        \"Additionally, the user can press on the informational tooltip to obtain instructions on how to operate this screen.\",\r\n    },\r\n    {\r\n      title: \"Downloading Records\",\r\n      description:\r\n        \"The user can download logs as a CSV file by clicking on the download icon on the top-right corner.\",\r\n    },\r\n  ],\r\n  profile: [\r\n    {\r\n      description:\r\n        \"The user can record or access personal information. The user can also manage spectators, set reminders, customize the app and read the user guide. There are five sections in the profile screen which are discussed below.\",\r\n    },\r\n    {\r\n      title: \"Account Information\",\r\n      description:\r\n        \"This section manages the information in the account. The user can see account type, email, change password or choose a name associated with the account. This information is used when connecting with spectators and storing pain records in the cloud. \",\r\n    },\r\n    {\r\n      title: \"Spectators\",\r\n      description:\r\n        \"This section will look differently depending on the user being a spectator or a chronic pain user. The section allows spectator and pain user to manage connections between them.\",\r\n    },\r\n    {\r\n      subTitle1: 'Spectators for \"Chronic Pain User\"',\r\n      description:\r\n        \"The user can change permissions for spectators by pressing the circle-shape button to enable or disable the spectator's ability to see their information.\",\r\n    },\r\n    {\r\n      subTitle2: \"Adding a new spectator\",\r\n      description:\r\n        'The user can add spectators by clicking on the \"Add New\" button and enter the email associated with the Tangible account of the spectator they wish to connect.',\r\n    },\r\n    {\r\n      subTitle2: \"Removing a spectator\",\r\n      description:\r\n        'The user can remove a spectator in the spectator\\'s section by pressing the vertical three-dot icon (\"Icon\") and then pressing on the option \"Delete\".',\r\n    },\r\n    {\r\n      subTitle2: \"What information can a spectator see?\",\r\n      description:\r\n        'The pain user can select the information that a spectator is allowed to see. The user can exclude different factors, e.g.(medicine, negative effect chart). To choose what information a spectator can see, the user must go to the spectator\\'s section and press on the vertical three-dot icon (\"Icon\")  on the spectator name he desires to customize; the user can press the \"Sharing Options\" button and choose which factors that spectator is allowed to see by checking or onchecking the boxes in that window.',\r\n    },\r\n    {\r\n      subTitle1: 'Spectators for \"Spectator User\"',\r\n      description:\r\n        \"The user can select which pain users he wishes to spectate by pressing the circle-shape button to enable or disable the pain user hence stopping all notifications associated with that pain user. The spectator can also see requests sent by a pain user in order to be spectated. The spectator can also manage other pain user options discussed below. \",\r\n    },\r\n    {\r\n      subTitle2: \"Accepting/Deleting Request\",\r\n      description:\r\n        'When a pain user sends a spectator request, a tooltip showing requests will appear in the spectator section (\"Icon\"). To accept a request, the user can press the \"accept\" button or press the vertical three-dot icon (\"Icon\") and choose to delete the request.',\r\n    },\r\n    {\r\n      subTitle2: \"Notify the spectator when the pain user has an episode.\",\r\n      description:\r\n        'By selecting the three-dot icon (\"Icon\") in an existing pain user on the spectator section, the spectator can select the notifications button and choose a threshold to be notified when the pain user has a pain episode above or below a chosen threshold.',\r\n    },\r\n    {\r\n      title: \"Customize Pain Scale\",\r\n      description:\r\n        'In the customize scale section, the user can select a number from the pain scale and edit the description on the right. The user must press the \"Apply\" button for the changes to take effect.',\r\n    },\r\n  ],\r\n};\r\n","import IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteTwoTone from \"@material-ui/icons/DeleteTwoTone\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Button,\r\n  FormGroup,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  addBackButton: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  switchText: {\r\n    textAlign: \"left\",\r\n  },\r\n}));\r\n/**\r\n * This component is used for the user to enable or disable existant Spectators.\r\n * It also contains a path to addNew, Edit and Delete Spectators.\r\n */\r\nconst SpectatorMenu = (props) => {\r\n  // Used for styling this component\r\n  const classes = useStyles();\r\n\r\n  // Selects or De-selects the pain spectators shown in spectatorList.js\r\n  const deleteSpectedHandler = (event) => {\r\n    props.deleteSpected();\r\n  };\r\n\r\n  // Deletes a pain spectator in the spectatorMenu.js\r\n  const declinePainSpectatorHandler = (spectatorToDelete) => {\r\n    props.declineUserToBeSpected();\r\n  };\r\n\r\n  // Deletes a pain spectator in the spectatorMenu.js\r\n  const addPainSpectatorHandler = () => {\r\n    props.addPainUserToBeSpectated();\r\n  };\r\n  console.log(`props.userToSpectate`, props.userToSpectate);\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"row\"\r\n      justifyContent=\"space-evenly\"\r\n      alignItems=\"center\"\r\n      xs={12}\r\n    >\r\n      <Grid item xs={6} className={classes.switchText}>\r\n        <Typography align=\"right\" className={classes.extendedIcon}>\r\n          {props.userToSpectate.email}\r\n        </Typography>\r\n      </Grid>\r\n\r\n      {props.userToSpectate.requestAccepted && (\r\n        <Grid xs={2}>\r\n          <IconButton\r\n            aria-label=\"delete\"\r\n            className={classes.margin}\r\n            onClick={deleteSpectedHandler}\r\n          >\r\n            <DeleteTwoTone fontSize=\"medium\" color=\"secondary\" />\r\n          </IconButton>\r\n        </Grid>\r\n      )}\r\n\r\n      {props.userToSpectate.request && (\r\n        <Grid item xs={6}>\r\n          <Button\r\n            size=\"small\"\r\n            variant=\"contained\"\r\n            onClick={addPainSpectatorHandler}\r\n            color=\"primary\"\r\n            className={classes.extendedIcon}\r\n          >\r\n            Accept\r\n          </Button>\r\n          <Button\r\n            size=\"small\"\r\n            variant=\"contained\"\r\n            onClick={declinePainSpectatorHandler}\r\n            color=\"secondary\"\r\n          >\r\n            Decline\r\n          </Button>\r\n        </Grid>\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\nexport default SpectatorMenu;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport SpectatorMenu from \"./SpectatorMenu\";\r\nimport OuterGrid from \"../../ui/OuterGrid\";\r\nimport AuthContext from \"../../../store/Auth-context\";\r\nimport Card from \"../../ui/Card\";\r\n\r\nconst Spectator = (props) => {\r\n  const authCtx = useContext(AuthContext);\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // STATES\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // Shows pain spectator main page\r\n  const [spectatorScreen, setSpectatorScreen] = useState({\r\n    spectatorMenu: true,\r\n    addSpectator: false,\r\n    deleteSpectator: false,\r\n  });\r\n\r\n  const [userToSpectate, setUserToSpectate] = useState({\r\n    painUserAccountId: \"\",\r\n    painUserEmail: \"\",\r\n    request: false,\r\n    requestAccepted: false,\r\n  });\r\n\r\n  // List of all body spectators\r\n  const [listPainSpectators, setListPainSpectators] = useState([]);\r\n\r\n  // This state is used to re-render the page after selectedSpectatorHandler\r\n  const [forceUpdate, setForceUpdate] = useState(0);\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // NAVIGATION FUNCTIONS\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // Swaps between spectator main page and Add spectator menu\r\n  const toSpectatorMenuHandler = () => {\r\n    setSpectatorScreen({\r\n      spectatorMenu: true,\r\n      addSpectator: false,\r\n      deleteSpectator: false,\r\n    });\r\n  };\r\n\r\n  // Swaps between spectator Menu and spectator main page\r\n  const toSpectatorListHandler = () => {\r\n    setSpectatorScreen((prevState) => {\r\n      return { ...prevState, spectatorList: true, spectatorMenu: false };\r\n    });\r\n  };\r\n\r\n  // Swaps between spectator Menu to add New Spectator\r\n  const toAddNewSpectatorHandler = (spectatorToEdit) => {\r\n    setSpectatorScreen((prevState) => {\r\n      return { ...prevState, spectatorMenu: false, addSpectator: true };\r\n    });\r\n  };\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // HTTP REQUESTS\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // PUT request to updates the 'selected' field of spectators in Firebase\r\n  const deleteSpectedHandler = (selectedSpectator) => {\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/Account/.json`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // Find Id of matching email\r\n        const accountID = Object.keys(data)[0];\r\n        fetch(\r\n          `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/Account/${accountID}/userToSpect.json`,\r\n          {\r\n            method: \"PUT\",\r\n            body: JSON.stringify(\"\"),\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n          }\r\n        )\r\n          .then((response) => response.json())\r\n          .then((data) => {});\r\n        authCtx.getUserToSpectUID(\"\");\r\n        setUserToSpectate({\r\n          painUserAccountId: \"\",\r\n          painUserEmail: \"\",\r\n          request: false,\r\n          requestAccepted: false,\r\n        });\r\n      });\r\n  };\r\n\r\n  // POST new pain spectator to firebase\r\n  function addPainUserToBeSpectatedHandler() {\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/Account/.json`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // Find Id of matching email\r\n        const accountID = Object.keys(data)[0];\r\n        fetch(\r\n          `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/Account/${accountID}/userToSpect.json`,\r\n          {\r\n            method: \"PUT\",\r\n            body: JSON.stringify(userToSpectate.painUserAccountId),\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n          }\r\n        )\r\n          .then((response) => response.json())\r\n          .then((data) => {});\r\n        authCtx.getUserToSpectUID(userToSpectate.painUserAccountId);\r\n        declineUserToBeSpectedHandler();\r\n      });\r\n  }\r\n\r\n  // DELETE request to delete a pain spectators in Firebase\r\n  const declineUserToBeSpectedHandler = () => {\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/Account/.json`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // Find Id of matching email\r\n        const accountID = Object.keys(data)[0];\r\n        fetch(\r\n          `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/Account/${accountID}/userInfoToSpect.json`,\r\n          {\r\n            method: \"DELETE\",\r\n          }\r\n        ).then((resp) => {\r\n          getSpectatorList();\r\n        });\r\n      });\r\n  };\r\n\r\n  // GET request to Firebase for pain spectator list and updates state with it.\r\n  const getSpectatorList = () => {\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/Account.json`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const spectatorInfo = data[Object.keys(data)[0]];\r\n        if (spectatorInfo.userInfoToSpect) {\r\n          // Here we want to change a state that will render user request.\r\n          setUserToSpectate({\r\n            ...spectatorInfo.userInfoToSpect,\r\n            request: true,\r\n          });\r\n        } else if (spectatorInfo.userToSpect !== \"\") {\r\n          fetch(\r\n            `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${spectatorInfo.userToSpect}/Account.json`\r\n          )\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n              setUserToSpectate({\r\n                ...data[Object.keys(data)[0]],\r\n                requestAccepted: true,\r\n              });\r\n            });\r\n        } else {\r\n          setUserToSpectate({\r\n            painUserAccountId: \"\",\r\n            painUserEmail: \"\",\r\n            request: false,\r\n            requestAccepted: false,\r\n          });\r\n        }\r\n        //setListPainSpectators(listSpectators);\r\n      });\r\n  };\r\n\r\n  props.showBadge(userToSpectate.request);\r\n\r\n  // GET request for the list of spectators when Page loads for the first time.\r\n  useEffect(() => {\r\n    getSpectatorList();\r\n  }, []);\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // RETURN\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  return (\r\n    <OuterGrid>\r\n      {userToSpectate.request && (\r\n        <SpectatorMenu\r\n          userToSpectate={userToSpectate}\r\n          deleteSpected={deleteSpectedHandler}\r\n          addPainUserToBeSpectated={addPainUserToBeSpectatedHandler}\r\n          declineUserToBeSpected={declineUserToBeSpectedHandler}\r\n        />\r\n      )}\r\n      {userToSpectate.requestAccepted && (\r\n        <SpectatorMenu\r\n          userToSpectate={userToSpectate}\r\n          deleteSpected={deleteSpectedHandler}\r\n          addPainUserToBeSpectated={addPainUserToBeSpectatedHandler}\r\n          declineUserToBeSpected={declineUserToBeSpectedHandler}\r\n        />\r\n      )}\r\n    </OuterGrid>\r\n  );\r\n};\r\n\r\nexport default Spectator;\r\n","import IconButton from \"@material-ui/core/IconButton\";\r\nimport DeleteTwoTone from \"@material-ui/icons/DeleteTwoTone\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport React from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Button,\r\n  FormGroup,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  margin: {\r\n    margin: theme.spacing(1),\r\n  },\r\n  extendedIcon: {\r\n    marginRight: theme.spacing(1),\r\n  },\r\n  addBackButton: {\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  switchText: {\r\n    textAlign: \"left\",\r\n  },\r\n}));\r\n/**\r\n * This component is used for the user to enable or disable existant Specteds.\r\n * It also contains a path to addNew, Edit and Delete Specteds.\r\n */\r\nconst SpectedMenu = (props) => {\r\n  // Used for styling this component\r\n  const classes = useStyles();\r\n\r\n  // Selects or De-selects the pain specteds shown in spectedList.js\r\n  const SelectedPainSpectedHandler = (event) => {\r\n    props.listPainSpecteds.forEach((spected) => {\r\n      if (spected.spectedName === event.target.name) {\r\n        spected.selected = !spected.selected;\r\n        props.getSelectedSpected(spected);\r\n      }\r\n    });\r\n  };\r\n\r\n  // Deletes a pain spected in the spectedMenu.js\r\n  const deletePainSpectedHandler = (spectedToDelete) => {\r\n    props.getSpectedToDelete(spectedToDelete);\r\n  };\r\n\r\n  // Deletes a pain spected in the spectedMenu.js\r\n  const addPainSpectedHandler = () => {\r\n    props.swapToAddNewSpected();\r\n  };\r\n\r\n  console.log(\"list\", props.listPainSpecteds);\r\n  return (\r\n    <FormControl component=\"fieldset\">\r\n      <FormLabel component=\"legend\">Spected Menu</FormLabel>\r\n      <FormGroup aria-label=\"spected\" name=\"spected1\">\r\n        {props.listPainSpecteds.map((spected) => {\r\n          return (\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justifyContent=\"space-between\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid xs={8} className={classes.switchText}>\r\n                <Typography>{spected.spectedName}</Typography>\r\n              </Grid>\r\n              <Grid xs={2}>\r\n                <IconButton\r\n                  aria-label=\"delete\"\r\n                  className={classes.margin}\r\n                  onClick={() => deletePainSpectedHandler(spected)}\r\n                >\r\n                  <DeleteTwoTone fontSize=\"medium\" color=\"secondary\" />\r\n                </IconButton>\r\n              </Grid>\r\n            </Grid>\r\n          );\r\n        })}\r\n      </FormGroup>\r\n      <Grid container direction=\"column\">\r\n        <Button\r\n          size=\"large\"\r\n          variant=\"contained\"\r\n          onClick={addPainSpectedHandler}\r\n          color=\"primary\"\r\n          className={classes.addBackButton}\r\n        >\r\n          Invite Spected\r\n        </Button>\r\n      </Grid>\r\n    </FormControl>\r\n  );\r\n};\r\nexport default SpectedMenu;\r\n","import React from \"react\";\r\nimport { useRef } from \"react\";\r\nimport { TextField, Button, makeStyles } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  innerGrid: {\r\n    maxWidth: \"300px\",\r\n  },\r\n  addBack: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));\r\n\r\n/**\r\n * This component allows the user to add a new pain spected to the\r\n * list in spectedMenu.\r\n */\r\nconst AddNewSpected = (props) => {\r\n  const classes = useStyles();\r\n  const spectedToAddInput = useRef();\r\n  const applyNewSpectedHandler = (event) => {\r\n    const spected = spectedToAddInput.current.value;\r\n\r\n    props.addNewSpected(spected);\r\n    props.toSpectedMenu();\r\n  };\r\n\r\n  return (\r\n    <Grid container direction=\"column\" className={classes.innerGrid}>\r\n      <TextField\r\n        inputRef={spectedToAddInput}\r\n        id=\"AddSpected\"\r\n        type=\"text\"\r\n        aria-describedby=\"my-helper-text\"\r\n        label=\"Spected Email\"\r\n        autoFocus={true}\r\n        variant=\"filled\"\r\n      />\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        size=\"large\"\r\n        onClick={applyNewSpectedHandler}\r\n        className={classes.addBack}\r\n      >\r\n        Apply\r\n      </Button>\r\n      <Button\r\n        variant=\"contained\"\r\n        size=\"large\"\r\n        onClick={() => props.toSpectedMenu()}\r\n        className={classes.addBack}\r\n      >\r\n        Cancel\r\n      </Button>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default AddNewSpected;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport SpectedMenu from \"./SpectedMenu\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport AddNewSpected from \"./AddNewSpected\";\r\nimport OuterGrid from \"../../ui/OuterGrid\";\r\nimport AuthContext from \"../../../store/Auth-context\";\r\n\r\nconst Spected = (props) => {\r\n  const authCtx = useContext(AuthContext);\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // STATES\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // Shows pain spected main page\r\n  const [spectedScreen, setSpectedScreen] = useState({\r\n    spectedMenu: true,\r\n    addSpected: false,\r\n    deleteSpected: false,\r\n  });\r\n\r\n  // List of all body specteds\r\n  const [listPainSpecteds, setListPainSpecteds] = useState([]);\r\n\r\n  // This state is used to re-render the page after selectedSpectedHandler\r\n  const [forceUpdate, setForceUpdate] = useState(0);\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // NAVIGATION FUNCTIONS\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // Swaps between spected main page and Add spected menu\r\n  const toSpectedMenuHandler = () => {\r\n    setSpectedScreen({\r\n      spectedMenu: true,\r\n      addSpected: false,\r\n      deleteSpected: false,\r\n    });\r\n  };\r\n\r\n  // Swaps between spected Menu and spected main page\r\n  const toSpectedListHandler = () => {\r\n    setSpectedScreen((prevState) => {\r\n      return { ...prevState, spectedList: true, spectedMenu: false };\r\n    });\r\n  };\r\n\r\n  // Swaps between spected Menu to add New Spected\r\n  const toAddNewSpectedHandler = (spectedToEdit) => {\r\n    setSpectedScreen((prevState) => {\r\n      return { ...prevState, spectedMenu: false, addSpected: true };\r\n    });\r\n  };\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // HTTP REQUESTS\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // PUT request to updates the 'selected' field of specteds in Firebase\r\n  const selectedSpectedHandler = (selectedSpected) => {\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/pain-specteds/${selectedSpected.fireBaseId}.json`,\r\n      {\r\n        method: \"PUT\",\r\n        body: JSON.stringify(selectedSpected),\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n      }\r\n    );\r\n    setForceUpdate(forceUpdate + 1);\r\n  };\r\n\r\n  // POST new pain spected to firebase\r\n  function addNewSpectedHandler(spectedToAdd) {\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/.json`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        for (const key in data) {\r\n          const SpectedEmailList =\r\n            data[key].Account[Object.keys(data[key].Account)[0]];\r\n          if (SpectedEmailList.email === spectedToAdd) {\r\n            const spected = {\r\n              spectedName: SpectedEmailList.name,\r\n              spectedEmail: spectedToAdd,\r\n              userID: key,\r\n              AccountID: Object.keys(data[key].Account)[0],\r\n            };\r\n            fetch(\r\n              `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/pain-specteds.json`,\r\n              {\r\n                method: \"POST\",\r\n                body: JSON.stringify(spected),\r\n                headers: {\r\n                  \"Content-Type\": \"application/json\",\r\n                },\r\n              }\r\n            ).then((response) => {\r\n              const painUserAccount = {\r\n                email: authCtx.userEmail,\r\n                painUserAccountId: authCtx.userUID,\r\n              };\r\n              fetch(\r\n                `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${key}/Account/${\r\n                  Object.keys(data[key].Account)[0]\r\n                }/userInfoToSpect.json`,\r\n                {\r\n                  method: \"PUT\",\r\n                  body: JSON.stringify(painUserAccount),\r\n                  headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                  },\r\n                }\r\n              ).then((res) => {\r\n                getSpectedList();\r\n              });\r\n            });\r\n          }\r\n        }\r\n      });\r\n  }\r\n\r\n  // DELETE request to delete a pain specteds in Firebase\r\n  const spectedToDeleteHandler = (spectedToDelete) => {\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/pain-specteds/.json`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        // Find Id of matching email\r\n        const spectedInfo = data[Object.keys(data)[0]];\r\n        fetch(\r\n          `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${spectedInfo.userID}/Account/${spectedInfo.AccountID}/userToSpect.json`,\r\n          {\r\n            method: \"PUT\",\r\n            body: JSON.stringify(\"\"),\r\n            headers: {\r\n              \"Content-Type\": \"application/json\",\r\n            },\r\n          }\r\n        ).then((resp) => {\r\n          fetch(\r\n            `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/pain-specteds.json`,\r\n            { method: \"DELETE\" }\r\n          ).then((res) => {\r\n            getSpectedList();\r\n          });\r\n        });\r\n      });\r\n  };\r\n\r\n  // GET request to Firebase for pain spected list and updates state with it.\r\n  const getSpectedList = () => {\r\n    // ${authCtx.userUID}/\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${authCtx.userUID}/pain-specteds.json`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const listSpecteds = [];\r\n        for (const key in data) {\r\n          listSpecteds.push(data[key]);\r\n        }\r\n        setListPainSpecteds(listSpecteds);\r\n      });\r\n  };\r\n\r\n  // GET request for the list of specteds when Page loads for the first time.\r\n  useEffect(() => {\r\n    getSpectedList();\r\n  }, []);\r\n\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  // RETURN\r\n  ////////////////////////////////////////////////////////////////////////////////\r\n  return (\r\n    <OuterGrid>\r\n      {spectedScreen.spectedMenu && (\r\n        <Grid>\r\n          <SpectedMenu\r\n            getPainSpected={props.getPainSpected}\r\n            listPainSpecteds={listPainSpecteds}\r\n            swapToAddNewSpected={toAddNewSpectedHandler}\r\n            getSpectedToDelete={spectedToDeleteHandler}\r\n          />\r\n        </Grid>\r\n      )}\r\n\r\n      {spectedScreen.addSpected && (\r\n        <AddNewSpected\r\n          toSpectedMenu={toSpectedMenuHandler}\r\n          addNewSpected={addNewSpectedHandler}\r\n        />\r\n      )}\r\n    </OuterGrid>\r\n  );\r\n};\r\n\r\nexport default Spected;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { spacing } from \"@material-ui/system\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Badge, Container } from \"@material-ui/core\";\r\nimport CustomizedAccordion from \"../components/profileComponents/CustomizedAccordion\";\r\nimport Card from \"../components/ui/Card\";\r\nimport UserGuideFormat from \"../components/profileComponents/UserGuideFormat\";\r\nimport { userGuide } from \"../components/profileComponents/TextUserGuide\";\r\nimport Spectator from \"../components/profileComponents/spectator/Spectator\";\r\nimport AuthContext from \"../store/Auth-context\";\r\nimport Spected from \"../components/profileComponents/spectedUser/Spected\";\r\n\r\nconst Profile = () => {\r\n  const authCtx = useContext(AuthContext);\r\n  const [state, setstate] = useState(false);\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Card newStyle={{ marginTop: \"4rem\", padding: \"4rem 10rem\" }}>\r\n        <Grid>\r\n          <CustomizedAccordion\r\n            accordionTitle={\"Account Information\"}\r\n            accordionColor={\"#F5F5F5\"}\r\n            panel={\"panel1\"}\r\n          ></CustomizedAccordion>\r\n          <CustomizedAccordion\r\n            accordionTitle={\"Spectators\"}\r\n            showBadge={state}\r\n            accordionColor={\"#F5F5F5\"}\r\n            panel={\"panel2\"}\r\n          >\r\n            {authCtx.isPainUser && <Spected />}\r\n            {!authCtx.isPainUser && (\r\n              <Spectator showBadge={(shodbadge) => setstate(shodbadge)} />\r\n            )}\r\n          </CustomizedAccordion>\r\n\r\n          <CustomizedAccordion\r\n            accordionTitle={\"User Guide\"}\r\n            accordionColor={\"#F5F5F5\"}\r\n            panel={\"panel3\"}\r\n            bodyText={userGuide.userGuideDesc}\r\n          >\r\n            <CustomizedAccordion\r\n              panel={\"panelUser1\"}\r\n              accordionTitle={\"Entries Screen Guide\"}\r\n              accordionColor={\"#fff\"}\r\n            >\r\n              <UserGuideFormat userGuideText={userGuide.entries} />\r\n            </CustomizedAccordion>\r\n\r\n            <CustomizedAccordion\r\n              accordionTitle={\"Stats Screen Guide\"}\r\n              panel={\"panelUser2\"}\r\n            >\r\n              <UserGuideFormat userGuideText={userGuide.stats} />\r\n            </CustomizedAccordion>\r\n            <CustomizedAccordion\r\n              accordionTitle={\"Records Screen Guide\"}\r\n              panel={\"panelUser3\"}\r\n            >\r\n              <UserGuideFormat userGuideText={userGuide.records} />\r\n            </CustomizedAccordion>\r\n            <CustomizedAccordion\r\n              accordionTitle={\"Profile Screen Guide\"}\r\n              panel={\"panelUser4\"}\r\n            >\r\n              <UserGuideFormat userGuideText={userGuide.profile} />\r\n            </CustomizedAccordion>\r\n          </CustomizedAccordion>\r\n          <CustomizedAccordion\r\n            panel={\"panel4\"}\r\n            accordionTitle={\"Customize Scale\"}\r\n            accordionColor={\"#F5F5F5\"}\r\n          ></CustomizedAccordion>\r\n        </Grid>\r\n      </Card>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n\r\n{\r\n  /* <Accordion className={classes.accordion}>\r\n              <AccordionSummary\r\n                expandIcon={<ExpandMoreIcon />}\r\n                aria-controls=\"panel1a-content\"\r\n                id=\"panel1a-header\"\r\n              >\r\n                <Typography className={classes.heading}>\r\n                  Accordion 1.1\r\n                </Typography>\r\n              </AccordionSummary>\r\n              <AccordionDetails>\r\n                <Typography>Second accordion</Typography>\r\n              </AccordionDetails>\r\n            </Accordion> */\r\n}\r\n","import React from \"react\";\r\nimport { Typography, makeStyles } from \"@material-ui/core\";\r\nimport {\r\n  BarChart,\r\n  Bar,\r\n  CartesianGrid,\r\n  XAxis,\r\n  YAxis,\r\n  Tooltip,\r\n  Legend,\r\n  ResponsiveContainer,\r\n} from \"recharts\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  graphMargin: {\r\n    left: \"10\",\r\n  },\r\n  graphTitle: {\r\n    paddingBottom: \"2rem\",\r\n  },\r\n}));\r\n/**\r\n * This reusable component renders the graphs showing treatment and medication\r\n * effects.\r\n */\r\nconst AffectingFactors = (props) => {\r\n  const classes = useStyles();\r\n  // tickFormatter function for showing percentages with 0 decimal places\r\n  const toPercent = (decimal) => {\r\n    return `${decimal.toFixed(0)}%`;\r\n  };\r\n  return (\r\n    <>\r\n      <Typography variant=\"h4\" className={classes.graphTitle}>\r\n        {props.statsTitle}\r\n      </Typography>\r\n      <ResponsiveContainer width=\"100%\" height={400}>\r\n        <BarChart\r\n          margin={{ left: 20 }}\r\n          data={props.frequencyData}\r\n          layout=\"vertical\"\r\n          stackOffset=\"expand\"\r\n        >\r\n          <CartesianGrid strokeDasharray=\"3 3\" />\r\n          <XAxis\r\n            type=\"number\"\r\n            dataKey=\"factorAverage\"\r\n            tickFormatter={toPercent}\r\n          />\r\n          <YAxis type=\"category\" dataKey=\"name\" angle=\"-45\" />\r\n          <Tooltip\r\n            cursor={{ stroke: \"green\", strokeWidth: 2 }}\r\n            formatter={toPercent}\r\n          />\r\n          <Legend />\r\n          <Bar dataKey=\"factorAverage\" fill={props.barColor} />\r\n        </BarChart>\r\n      </ResponsiveContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AffectingFactors;\r\n","import Card from \"../ui/Card\";\r\nimport styles from \"./ScaleFrequency.module.css\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nimport { useState } from \"react\";\r\n\r\nconst ScaleFrequency = (props) => {\r\n  let scaleFrequency = {\r\n    none: 0,\r\n    minor: 0,\r\n    moderate: 0,\r\n    severe: 0,\r\n    unimaginable: 0,\r\n  };\r\n\r\n  props.listOfPainEntries.listOfEntries.forEach((painEntry) => {\r\n    if (painEntry.painScale === 0) {\r\n      scaleFrequency.none++;\r\n    } else if (\r\n      painEntry.painScale === 1 ||\r\n      painEntry.painScale === 2 ||\r\n      painEntry.painScale === 3\r\n    ) {\r\n      scaleFrequency.minor++;\r\n    } else if (\r\n      painEntry.painScale === 4 ||\r\n      painEntry.painScale === 5 ||\r\n      painEntry.painScale === 6\r\n    ) {\r\n      scaleFrequency.moderate++;\r\n    } else if (\r\n      painEntry.painScale === 7 ||\r\n      painEntry.painScale === 8 ||\r\n      painEntry.painScale === 9\r\n    ) {\r\n      scaleFrequency.severe++;\r\n    } else if (painEntry.painScale === 10) {\r\n      scaleFrequency.unimaginable++;\r\n    }\r\n  });\r\n\r\n  const [currentScale] = useState(scaleFrequency);\r\n\r\n  const validatePainRecords = () => {\r\n    if (\r\n      props.listOfPainEntries.listOfEntries[0] === undefined ||\r\n      props.listOfPainEntries.listOfEntries[0][0] === \"I\"\r\n    ) {\r\n      return 0;\r\n    } else {\r\n      return props.listOfPainEntries.listOfEntries.length;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card newStyle={{ padding: \"4.5rem\", marginTop: \"4rem\" }}>\r\n      <Typography variant=\"h4\">Pain Intensity - Scale Frequency</Typography>\r\n      <Typography variant=\"body1\">\r\n        Total pain records: {validatePainRecords()}\r\n      </Typography>\r\n\r\n      <div className={styles[\"pain-records-container\"]}>\r\n        <div className={`${styles.none} scale-container`}>\r\n          {currentScale.none}\r\n        </div>\r\n        <div className={`${styles.minor} scale-container`}>\r\n          {currentScale.minor}\r\n        </div>\r\n        <div className={`${styles.moderate} scale-container`}>\r\n          {currentScale.moderate}\r\n        </div>\r\n        <div className={`${styles.severe} scale-container`}>\r\n          {currentScale.severe}\r\n        </div>\r\n        <div className={`${styles.unimaginable} scale-container`}>\r\n          {currentScale.unimaginable}\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default ScaleFrequency;\r\n","import Card from \"../ui/Card\";\r\nimport { useState } from \"react\";\r\nimport styles from \"./TimePeriods.module.css\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst calculateAverage = (arr) => {\r\n  if (arr.length === 0) {\r\n    return 0;\r\n  }\r\n\r\n  let morningTotal = 0;\r\n  for (let i = 0; i < arr.length; i++) {\r\n    morningTotal += arr[i];\r\n  }\r\n  let morningAverage = (morningTotal / arr.length).toFixed(2);\r\n\r\n  return morningAverage;\r\n};\r\n\r\nconst TimePeriods = (props) => {\r\n  const timePeriods = {\r\n    earlyMorning: [],\r\n    morning: [],\r\n    afternoon: [],\r\n    evening: [],\r\n  };\r\n\r\n  const getTimeFromHours = (time) => {\r\n    time = time.split(\":\");\r\n    let now = new Date();\r\n    return new Date(\r\n      now.getFullYear(),\r\n      now.getMonth(),\r\n      now.getDate(),\r\n      ...time\r\n    ).getHours();\r\n  };\r\n\r\n  props.listOfPainEntries.listOfEntries.forEach((entry) => {\r\n    if (entry.date) {\r\n      const curHr = getTimeFromHours(entry.date.time);\r\n\r\n      if (curHr < 6) {\r\n        timePeriods.earlyMorning.push(entry.painScale);\r\n      } else if (curHr < 12) {\r\n        timePeriods.morning.push(entry.painScale);\r\n      } else if (curHr < 18) {\r\n        timePeriods.afternoon.push(entry.painScale);\r\n      } else {\r\n        timePeriods.evening.push(entry.painScale);\r\n      }\r\n    }\r\n  });\r\n\r\n  const [currentTimePeriods] = useState(timePeriods);\r\n\r\n  return (\r\n    <Card newStyle={{ padding: \"4.5rem\" }}>\r\n      <Typography variant=\"h4\">Pain Intensity - Time Periods</Typography>\r\n\r\n      <div className={styles[\"time-periods-container\"]}>\r\n        <div className={styles[\"time-container\"]}>\r\n          <h4>Occurrences:</h4>\r\n          <p>{currentTimePeriods.earlyMorning.length}</p>\r\n          <h4>Average: </h4>\r\n          <p>{calculateAverage(currentTimePeriods.earlyMorning)}</p>\r\n          <h4>00:00 - 06:00</h4>\r\n          <p>Early Morning</p>\r\n        </div>\r\n        <div className={styles[\"time-container\"]}>\r\n          <h4>Occurrences:</h4>\r\n          <p>{currentTimePeriods.morning.length}</p>\r\n          <h4>Average: </h4>\r\n          <p>{calculateAverage(currentTimePeriods.morning)}</p>\r\n\r\n          <h4>06:00 - 12:00</h4>\r\n          <p>Morning</p>\r\n        </div>\r\n        <div className={styles[\"time-container\"]}>\r\n          <h4>Occurrences:</h4>\r\n          <p>{currentTimePeriods.afternoon.length}</p>\r\n          <h4>Average: </h4>\r\n          <p>{calculateAverage(currentTimePeriods.afternoon)}</p>\r\n\r\n          <h4>12:00 - 18:00</h4>\r\n          <p>Afternoon</p>\r\n        </div>\r\n        <div className={styles[\"time-container\"]}>\r\n          <h4>Occurrences:</h4>\r\n          <p>{currentTimePeriods.evening.length}</p>\r\n          <h4>Average: </h4>\r\n          <p>{calculateAverage(currentTimePeriods.evening)}</p>\r\n          <h4>18:00 - 00:00</h4>\r\n          <p>Evening</p>\r\n        </div>\r\n      </div>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default TimePeriods;\r\n","/**\r\n * This File contains helper functions used to create the logic and math of the\r\n * Statistical graphs shown on the Statistics page\r\n */\r\n\r\n// Counts the total occurrences of each pain location in pain entries and returns\r\n// an array of objects with location, percentage frequency and total occurrences\r\nexport function locationCounter(recordedLocations, entriesLength) {\r\n  const locationsCount = {};\r\n  const locationArray = [];\r\n  for (const num of recordedLocations) {\r\n    locationsCount[num] = locationsCount[num] ? locationsCount[num] + 1 : 1;\r\n  }\r\n  for (let key in locationsCount) {\r\n    let count = locationsCount[key];\r\n    let frequencyPercentage = (count / entriesLength) * 100;\r\n    let location = key;\r\n    locationArray.push({\r\n      name: location,\r\n      factorAverage: frequencyPercentage,\r\n      count,\r\n    });\r\n  }\r\n  locationArray.sort(compare);\r\n  return locationArray;\r\n}\r\n\r\n// Returns an array containing effect and renaming the name of medicine and treatment\r\nconst createListMedTreat = (recordedMedicine, recordedTreatment) => {\r\n  // Changes medicine name to name to concatenate with treatment\r\n  const medication = recordedMedicine.map((item) => {\r\n    return { name: item.medicationName, effect: item.effect };\r\n  });\r\n\r\n  // Changes treatment name to name to concatenate with medicine\r\n  const treatment = recordedTreatment.map((item) => {\r\n    return { name: item.treatmentName, effect: item.effect };\r\n  });\r\n\r\n  // Concatenates medicine and treatment array\r\n  return medication.concat(treatment);\r\n};\r\n\r\n// Returns an array of objects containing factor name, occurrances of selected effect and\r\n// total of effect for each factor\r\nconst createListFactorEffects = (treatAndMed, effect) => {\r\n  // Contains name of factor and the occurances for better and total\r\n  const medAndTreatBetterAndTotal = [];\r\n  // Creates an object for each factor and adds the occurrances of better and total.\r\n  treatAndMed.forEach((factor) => {\r\n    // findIndex returns -1 if the factor is not found in the array.\r\n    let factorIndex = medAndTreatBetterAndTotal.findIndex(\r\n      (med) => med.name === factor.name\r\n    );\r\n    // Adds a factor if not in the array and +1 to selected and total effect.\r\n    if (factorIndex === -1 && factor.effect === effect) {\r\n      medAndTreatBetterAndTotal.push({\r\n        name: factor.name,\r\n        effecttoAVG: 1,\r\n        total: 1,\r\n        effectName: effect,\r\n      });\r\n      // Adds a factor if it doesen't exists and +1 to the total occurance\r\n    } else if (factorIndex === -1 && factor.effect !== effect) {\r\n      medAndTreatBetterAndTotal.push({\r\n        name: factor.name,\r\n        effecttoAVG: 0,\r\n        total: 1,\r\n        effectName: effect,\r\n      });\r\n      // If the factor already exist and contains the selected effect\r\n    } else if (factorIndex !== -1 && factor.effect === effect) {\r\n      medAndTreatBetterAndTotal[factorIndex].effecttoAVG++;\r\n      medAndTreatBetterAndTotal[factorIndex].total++;\r\n      // If the factor already exist and does not contains the selected effect\r\n    } else {\r\n      medAndTreatBetterAndTotal[factorIndex].total++;\r\n    }\r\n  });\r\n  return medAndTreatBetterAndTotal;\r\n};\r\n// Arranges array of objects\r\nfunction compare(a, b) {\r\n  if (a.factorAverage > b.factorAverage) {\r\n    return -1;\r\n  }\r\n  if (a.factorAverage < b.factorAverage) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n}\r\n\r\n// Returns an array containing  the factor name and average of effects\r\nexport function factorEffectAverage(\r\n  recordedMedicine,\r\n  recordedTreatment,\r\n  effect\r\n) {\r\n  // Contains the factor name and average of effect: better\r\n  const factorAndEffectAverage = [];\r\n  // Returns a restructured / combined array of medicines and treatments\r\n  const treatAndMed = createListMedTreat(recordedMedicine, recordedTreatment);\r\n  // Returns an array of object containing the factor name, and occurances of effects\r\n  const factorEffects = createListFactorEffects(treatAndMed, effect);\r\n  // Returns an array with the name and average of effect occurances.\r\n  factorEffects.forEach((factor) => {\r\n    // The if statement below prevents empty factors of showing up in the charts\r\n    if (factor.effecttoAVG !== 0) {\r\n      // Gets the average of each factor occurnces\r\n      const effectAverage = (factor.effecttoAVG / factor.total) * 100;\r\n      factorAndEffectAverage.push({\r\n        name: factor.name,\r\n        factorAverage: effectAverage,\r\n      });\r\n    }\r\n  });\r\n  // Arranges effects in decreasing order\r\n  factorAndEffectAverage.sort(compare);\r\n\r\n  return factorAndEffectAverage;\r\n}\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport AffectingFactors from \"../components/statisticsPageComponents/AffectingFactors\";\r\nimport ScaleFrequency from \"../components/statisticsPageComponents/ScaleFrequency\";\r\nimport TimePeriods from \"../components/statisticsPageComponents/TimePeriods\";\r\nimport {\r\n  locationCounter,\r\n  factorEffectAverage,\r\n} from \"../components/statisticsPageComponents/StatisticFunctions\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport Card from \"../components/ui/Card\";\r\nimport { Container } from \"@material-ui/core\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport AuthContext from \"../store/Auth-context\";\r\n\r\nconst useStyles = {\r\n  card: {\r\n    height: \"400\",\r\n    width: \"90%\",\r\n    textAlign: \"center\",\r\n    padding: \"2.5rem \",\r\n  },\r\n};\r\n\r\nconst Stats = () => {\r\n  const authCtx = useContext(AuthContext);\r\n  const classes = useStyles;\r\n  let userID;\r\n  if (authCtx.isPainUser) {\r\n    userID = authCtx.userUID;\r\n  } else {\r\n    userID = authCtx.userToSpectUID;\r\n  }\r\n\r\n  // List of all pain entries\r\n  const [painEntriesStats, setPainEntriesStats] = useState({\r\n    listOfEntries: null,\r\n    locationFrequency: null,\r\n    negativeEffectFrequency: null,\r\n    positiveEffectFrequency: null,\r\n    ineffectualFactorFrequency: null,\r\n  });\r\n\r\n  // boolean for the loading component\r\n  const [isloading, setIsloading] = useState(true);\r\n\r\n  // GET request for the list of locations when Page loads for the first time.\r\n  useEffect(() => {\r\n    fetch(\r\n      `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${userID}/pain-entries.json`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((data) => {\r\n        const recordedLocations = [];\r\n        const recordedMedicine = [];\r\n        const recordedTreatment = [];\r\n        const listOfEntries = [];\r\n        for (const key in data) {\r\n          const entries = {\r\n            ...data[key],\r\n          };\r\n          listOfEntries.push(entries);\r\n          if (data[key].painLocation) {\r\n            recordedLocations.push(...data[key].painLocation);\r\n          }\r\n          if (data[key].medicine) {\r\n            recordedMedicine.push(...data[key].medicine);\r\n          }\r\n\r\n          if (data[key].treatment) {\r\n            recordedTreatment.push(...data[key].treatment);\r\n          }\r\n        }\r\n\r\n        setPainEntriesStats({\r\n          listOfEntries: listOfEntries,\r\n          locationFrequency: locationCounter(\r\n            recordedLocations,\r\n            listOfEntries.length\r\n          ),\r\n          negativeEffectFrequency: factorEffectAverage(\r\n            recordedMedicine,\r\n            recordedTreatment,\r\n            \"Worse\"\r\n          ),\r\n          positiveEffectFrequency: factorEffectAverage(\r\n            recordedMedicine,\r\n            recordedTreatment,\r\n            \"Better\"\r\n          ),\r\n          ineffectualFactorFrequency: factorEffectAverage(\r\n            recordedMedicine,\r\n            recordedTreatment,\r\n            \"No Change\"\r\n          ),\r\n        });\r\n        setIsloading(false);\r\n      });\r\n  }, []);\r\n  // Shows a loader while the Fetching\r\n  if (isloading) {\r\n    return <CircularProgress />;\r\n  }\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <Grid container>\r\n        <Grid item xs={12}>\r\n          <ScaleFrequency listOfPainEntries={painEntriesStats} />\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <TimePeriods listOfPainEntries={painEntriesStats} />\r\n        </Grid>\r\n        <Grid item xs={12} sm={12} md={6} lg={6} xl={6}>\r\n          <Card newStyle={classes.card}>\r\n            <AffectingFactors\r\n              statsTitle=\"Pain Locations\"\r\n              frequencyData={painEntriesStats.locationFrequency}\r\n              barColor=\"#83E8FF\"\r\n            />\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12} sm={12} md={6} lg={6} xl={6}>\r\n          <Card newStyle={classes.card}>\r\n            <AffectingFactors\r\n              statsTitle=\"Negative Effects\"\r\n              frequencyData={painEntriesStats.negativeEffectFrequency}\r\n              barColor=\"#FF6262\"\r\n            />\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12} sm={12} md={6} lg={6} xl={6}>\r\n          <Card newStyle={classes.card}>\r\n            <AffectingFactors\r\n              statsTitle=\"Positive Effects\"\r\n              frequencyData={painEntriesStats.positiveEffectFrequency}\r\n              barColor=\"#84FF97\"\r\n            />\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={12} sm={12} md={6} lg={6} xl={6}>\r\n          <Card newStyle={classes.card}>\r\n            <AffectingFactors\r\n              statsTitle=\"Ineffectual Factors\"\r\n              frequencyData={painEntriesStats.ineffectualFactorFrequency}\r\n              barColor=\"#946E83\"\r\n            />\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Stats;\r\n","export default __webpack_public_path__ + \"static/media/tangerine.14f98906.png\";","import React, { useContext } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport tangerine from \"../../images/tangerine.png\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { Link } from \"react-router-dom\";\r\nimport AuthContext from \"../../store/Auth-context\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  buttonPadding: {\r\n    paddingLeft: theme.spacing(3),\r\n    paddingRight: theme.spacing(3),\r\n  },\r\n}));\r\nconst NavBar = () => {\r\n  const classes = useStyles();\r\n  const authCtx = useContext(AuthContext);\r\n\r\n  const logoutHandler = () => {\r\n    authCtx.logout();\r\n  };\r\n\r\n  const renderEntryScreen = () => {\r\n    if (authCtx.isLoggedIn && authCtx.isPainUser) {\r\n      return (\r\n        <Button\r\n          color=\"inherit\"\r\n          size=\"large\"\r\n          component={Link}\r\n          to=\"/pain-entries\"\r\n        >\r\n          Entry\r\n        </Button>\r\n      );\r\n    }\r\n  };\r\n  return (\r\n    <AppBar position=\"sticky\">\r\n      <Toolbar>\r\n        <Grid container direction=\"row\">\r\n          <Grid\r\n            container\r\n            direction=\"row\"\r\n            className={classes.buttonPadding}\r\n            alignItems=\"center\"\r\n            item\r\n            xs={3}\r\n          >\r\n            <img src={tangerine} alt=\"tangerine\" width=\"34\" height=\"34\" />\r\n            &nbsp; &nbsp;\r\n            <Typography variant=\"h4\">Tangible</Typography>\r\n          </Grid>\r\n\r\n          <Grid container direction=\"row\" justifyContent=\"flex-end\" item xs={9}>\r\n            {renderEntryScreen()}\r\n\r\n            {authCtx.isLoggedIn && (\r\n              <Button\r\n                color=\"inherit\"\r\n                size=\"large\"\r\n                component={Link}\r\n                to=\"/stats\"\r\n                className={classes.buttonPadding}\r\n              >\r\n                Statistics\r\n              </Button>\r\n            )}\r\n\r\n            {authCtx.isLoggedIn && (\r\n              <Button\r\n                color=\"inherit\"\r\n                size=\"large\"\r\n                component={Link}\r\n                to=\"/records\"\r\n                className={classes.buttonPadding}\r\n              >\r\n                Records\r\n              </Button>\r\n            )}\r\n\r\n            {authCtx.isLoggedIn && (\r\n              <Button\r\n                color=\"inherit\"\r\n                size=\"large\"\r\n                component={Link}\r\n                to=\"/profile\"\r\n                className={classes.buttonPadding}\r\n              >\r\n                Profile\r\n              </Button>\r\n            )}\r\n\r\n            {authCtx.isLoggedIn && (\r\n              <Button\r\n                color=\"inherit\"\r\n                size=\"large\"\r\n                variant=\"outlined\"\r\n                component={Link}\r\n                onClick={logoutHandler}\r\n                to=\"/\"\r\n                className={classes.buttonPadding}\r\n              >\r\n                Logout\r\n              </Button>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nimport { useState, useRef } from \"react\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {\"Copyright © \"}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        Tangible\r\n      </Link>{\" \"}\r\n      {new Date().getFullYear()}\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    margin: theme.spacing(12, 16),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(1),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nconst SignIn = (props) => {\r\n  const emailInputRef = useRef();\r\n  const passwordInputRef = useRef();\r\n  const classes = useStyles();\r\n\r\n  //Sends Email and Password to parent component for Authentication\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    const enteredEmail = emailInputRef.current.value;\r\n    const enteredPassword = passwordInputRef.current.value;\r\n    props.onSubmit(enteredEmail, enteredPassword);\r\n    // optional: Add validation\r\n  };\r\n\r\n  return (\r\n    <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign in\r\n        </Typography>\r\n        <form className={classes.form} noValidate onSubmit={submitHandler}>\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            id=\"email\"\r\n            label=\"Email Address\"\r\n            name=\"email\"\r\n            autoComplete=\"email\"\r\n            autoFocus\r\n            inputRef={emailInputRef}\r\n          />\r\n          <TextField\r\n            variant=\"outlined\"\r\n            margin=\"normal\"\r\n            required\r\n            fullWidth\r\n            name=\"password\"\r\n            label=\"Password\"\r\n            type=\"password\"\r\n            id=\"password\"\r\n            autoComplete=\"current-password\"\r\n            inputRef={passwordInputRef}\r\n          />\r\n          <FormControlLabel\r\n            control={<Checkbox value=\"remember\" color=\"primary\" />}\r\n            label=\"Remember me\"\r\n          />\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n          >\r\n            Sign In\r\n          </Button>\r\n          <Grid container>\r\n            <Grid item xs>\r\n              <Button color=\"primary\">Forgot password?</Button>\r\n            </Grid>\r\n            <Grid item>\r\n              <Button onClick={props.toSignUp} color=\"primary\">\r\n                Don't have an account? Sign Up\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n          <Box mt={5}>\r\n            <Copyright />\r\n          </Box>\r\n        </form>\r\n      </div>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SignIn;\r\n","import React, { useRef, useState } from \"react\";\r\nimport clsx from \"clsx\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport LockOutlinedIcon from \"@material-ui/icons/LockOutlined\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\n\r\nfunction Copyright() {\r\n  return (\r\n    <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\r\n      {\"Copyright © \"}\r\n      <Link color=\"inherit\" href=\"https://material-ui.com/\">\r\n        Tangible\r\n      </Link>{\" \"}\r\n      {new Date().getFullYear()}\r\n      {\".\"}\r\n    </Typography>\r\n  );\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  ButtonOn: {\r\n    \"&:hover\": {\r\n      background: \"#FF9248\",\r\n    },\r\n    background: \"#FF9248\",\r\n    color: \"white\",\r\n  },\r\n  ButtonOff: {\r\n    \"&:hover\": {\r\n      background: \"#ededed\",\r\n    },\r\n    background: \"#ededed\",\r\n    color: \"#787878\",\r\n  },\r\n  paper: {\r\n    margin: theme.spacing(12, 16),\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  avatar: {\r\n    margin: theme.spacing(1),\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: \"100%\", // Fix IE 11 issue.\r\n    marginTop: theme.spacing(3),\r\n  },\r\n  submit: {\r\n    margin: theme.spacing(3, 0, 2),\r\n  },\r\n}));\r\n\r\nexport default function SignUp(props) {\r\n  const classes = useStyles();\r\n\r\n  // Input Refs\r\n  const emailInputRef = useRef();\r\n  const passwordInputRef = useRef();\r\n  const nameInputRef = useRef();\r\n  const lastNameInputRef = useRef();\r\n  //Sends Email and Password to parent component for Authentication\r\n  const submitHandler = (event) => {\r\n    event.preventDefault();\r\n    const enteredEmail = emailInputRef.current.value;\r\n    const enteredPassword = passwordInputRef.current.value;\r\n    const displayName =\r\n      nameInputRef.current.value + \" \" + lastNameInputRef.current.value;\r\n    props.onSubmit(enteredEmail, enteredPassword, displayName, userRole);\r\n    // optional: Add validation\r\n  };\r\n\r\n  const [userRole, setuserRole] = useState(\"PAIN USER\");\r\n  const [userRoleBtnClr, setuserRoleBtnClr] = useState(false);\r\n  const changeBtnColor = (event) => {\r\n    if (event.target.innerText === \"PAIN USER\") {\r\n      setuserRoleBtnClr(false);\r\n    } else {\r\n      setuserRoleBtnClr(true);\r\n    }\r\n    setuserRole(event.target.innerText);\r\n  };\r\n  return (\r\n    <Grid item xs={12} sm={8} md={5} component={Paper} elevation={6} square>\r\n      <div className={classes.paper}>\r\n        <Avatar className={classes.avatar}>\r\n          <LockOutlinedIcon />\r\n        </Avatar>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign up\r\n        </Typography>\r\n        <form className={classes.form} noValidate onSubmit={submitHandler}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                autoComplete=\"given-name\"\r\n                name=\"firstName\"\r\n                variant=\"outlined\"\r\n                required\r\n                inputRef={nameInputRef}\r\n                fullWidth\r\n                id=\"firstName\"\r\n                label=\"First Name\"\r\n                autoFocus\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                inputRef={lastNameInputRef}\r\n                fullWidth\r\n                id=\"lastName\"\r\n                label=\"Last Name\"\r\n                name=\"lastName\"\r\n                autoComplete=\"family-name\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"email\"\r\n                label=\"Email Address\"\r\n                name=\"email\"\r\n                autoComplete=\"email\"\r\n                inputRef={emailInputRef}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                id=\"password\"\r\n                autoComplete=\"current-password\"\r\n                inputRef={passwordInputRef}\r\n              />\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              xs={12}\r\n              container\r\n              direction=\"row\"\r\n              justifyContent=\"space-between\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item xs={5}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  className={clsx(classes.ButtonOn, {\r\n                    [classes.ButtonOff]: userRoleBtnClr,\r\n                  })}\r\n                  size=\"large\"\r\n                  onClick={changeBtnColor}\r\n                  fullWidth=\"true\"\r\n                >\r\n                  Pain User\r\n                </Button>\r\n              </Grid>\r\n              <Grid item xs={5}>\r\n                <Button\r\n                  variant=\"contained\"\r\n                  onClick={changeBtnColor}\r\n                  className={clsx(classes.ButtonOn, {\r\n                    [classes.ButtonOff]: !userRoleBtnClr,\r\n                  })}\r\n                  size=\"large\"\r\n                  fullWidth=\"true\"\r\n                >\r\n                  Spectator\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Button\r\n            type=\"submit\"\r\n            fullWidth\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            className={classes.submit}\r\n          >\r\n            Sign Up\r\n          </Button>\r\n          <Grid container justifyContent=\"flex-end\">\r\n            <Grid item>\r\n              <Button onClick={props.toSignIn} color=\"primary\">\r\n                Already have an account? Sign in\r\n              </Button>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </div>\r\n      <Box mt={5}>\r\n        <Copyright />\r\n      </Box>\r\n    </Grid>\r\n  );\r\n}\r\n","// On SignUp Saves User Role and Name\r\nexport const createUserAccountDatabase = (userData, userRole) => {\r\n  return fetch(\r\n    `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${userData.localId}/Account.json`,\r\n    {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        email: userData.email,\r\n        name: userData.displayName,\r\n        userRole: userRole,\r\n        userToSpect: \"\",\r\n        userInfoToSpect: {},\r\n      }),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    }\r\n  );\r\n};\r\n\r\n// On LogIn gets current user role and userToSpectUID\r\nexport const getUserAccountDatabase = (userUID) => {\r\n  return fetch(\r\n    `https://tangible-47447-default-rtdb.europe-west1.firebasedatabase.app/${userUID}/Account.json`\r\n  )\r\n    .then((res) => {\r\n      if (res.ok) {\r\n        //SignInUp Success\r\n        return res.json();\r\n      } else {\r\n        //SignInUp Fails\r\n        return res.json().then((data) => {\r\n          let errorMessage = \"Authentication failed\";\r\n          if (data && data.error && data.error.message) {\r\n            errorMessage = data.error.message;\r\n          }\r\n          throw new Error(errorMessage);\r\n        });\r\n      }\r\n    })\r\n    .then((data) => {\r\n      const accountInfo = { isPainUser: null, userToSpect: \"\" };\r\n      const key = Object.keys(data)[0];\r\n      if (data[key].userToSpect !== \"\") {\r\n        accountInfo.userToSpect = data[key].userToSpect;\r\n      }\r\n      if (data[key].userRole === \"SPECTATOR\") {\r\n        accountInfo.isPainUser = false;\r\n      } else if (data[key].userRole === \"PAIN USER\") {\r\n        accountInfo.isPainUser = true;\r\n      }\r\n      return accountInfo;\r\n      return data;\r\n    })\r\n    .catch((error) => {\r\n      alert(error.message);\r\n    });\r\n};\r\n\r\n// Returns current account user data on login\r\nexport const getUserLoginData = (email, password) => {\r\n  return fetch(\r\n    \"https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCn_yqpancW5SEgxzlAVxtVNvj07bP4ftQ\",\r\n    {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        email: email,\r\n        password: password,\r\n        returnSecureToken: true,\r\n      }),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    }\r\n  )\r\n    .then((res) => {\r\n      if (res.ok) {\r\n        //SignInUp Success\r\n        return res.json();\r\n      } else {\r\n        //SignInUp Fails\r\n        return res.json().then((data) => {\r\n          let errorMessage = \"Authentication failed\";\r\n          if (data && data.error && data.error.message) {\r\n            errorMessage = data.error.message;\r\n          }\r\n          throw new Error(errorMessage);\r\n        });\r\n      }\r\n    }) //SignInUp Success\r\n    .then((data) => {\r\n      return data;\r\n    }) //SignInUp Fails\r\n    .catch((error) => {\r\n      alert(error.message);\r\n    });\r\n};\r\n/**\r\n * Creates new user with displayName and Returns\r\n * current account user data.\r\n */\r\nexport const createNewUser = (email, password, displayName, userRole) => {\r\n  return fetch(\r\n    \"https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyCn_yqpancW5SEgxzlAVxtVNvj07bP4ftQ\",\r\n    {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        email: email,\r\n        password: password,\r\n        displayName: displayName,\r\n        returnSecureToken: true,\r\n      }),\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    }\r\n  )\r\n    .then((res) => {\r\n      if (res.ok) {\r\n        //SignInUp Success\r\n        return res.json();\r\n      } else {\r\n        //SignInUp Fails\r\n        return res.json().then((data) => {\r\n          let errorMessage = \"Authentication failed\";\r\n          if (data && data.error && data.error.message) {\r\n            errorMessage = data.error.message;\r\n          }\r\n          throw new Error(errorMessage);\r\n        });\r\n      }\r\n    }) //SignInUp Success\r\n    .then((data) => {\r\n      return data;\r\n    }) //SignInUp Fails\r\n    .catch((error) => {\r\n      alert(error.message);\r\n    });\r\n};\r\n","import React, { useState, useContext } from \"react\";\r\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\r\nimport Link from \"@material-ui/core/Link\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport SignIn from \"../components/SignIn\";\r\nimport SignUp from \"../components/SignUp\";\r\nimport AuthContext from \"../store/Auth-context\";\r\nimport {\r\n  getUserLoginData,\r\n  createNewUser,\r\n  getUserAccountDatabase,\r\n  createUserAccountDatabase,\r\n} from \"../components/ui/LoginHttpRequests\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    height: \"100vh\",\r\n  },\r\n  image: {\r\n    backgroundImage: \"url(https://source.unsplash.com/1600x900/?health)\",\r\n    backgroundRepeat: \"no-repeat\",\r\n    backgroundColor:\r\n      theme.palette.type === \"light\"\r\n        ? theme.palette.grey[50]\r\n        : theme.palette.grey[900],\r\n    backgroundSize: \"cover\",\r\n    backgroundPosition: \"center\",\r\n  },\r\n}));\r\n\r\nexport default function Signin() {\r\n  const classes = useStyles();\r\n  const authCtx = useContext(AuthContext);\r\n  const history = useHistory();\r\n\r\n  const [isSignIn, setIsSignIn] = useState(true);\r\n  //Swaps between sign in and sign up page\r\n  const signInUpSwap = () => {\r\n    setIsSignIn(!isSignIn);\r\n  };\r\n\r\n  //Submits a SignUp or SignIn request to firebase for Authentication\r\n  const submitHandler = (email, password, displayName, userRole) => {\r\n    if (isSignIn) {\r\n      // Logs in and returns a user and it's data\r\n      getUserLoginData(email, password).then((res) => {\r\n        if (res) {\r\n          authCtx.getUserUID(res.localId);\r\n          authCtx.login(res.idToken);\r\n          authCtx.getUserEmail(res.email);\r\n          getUserAccountDatabase(res.localId).then((accountInfo) => {\r\n            authCtx.getIsPainUser(accountInfo.isPainUser);\r\n            if (accountInfo.Info !== \"\") {\r\n              authCtx.getUserToSpectUID(accountInfo);\r\n            }\r\n          });\r\n          // if is pain user direct to pain entries if spectator direct to profile\r\n          if (authCtx.isPainUser) {\r\n            history.replace(\"/pain-entries\");\r\n          } else {\r\n            history.replace(\"/profile\");\r\n          }\r\n        }\r\n      });\r\n    } else {\r\n      // Creates a user account and returns it's created data\r\n      createNewUser(email, password, displayName, userRole).then((res) => {\r\n        if (res) {\r\n          authCtx.getUserUID(res.localId);\r\n          authCtx.login(res.idToken);\r\n          authCtx.getUserEmail(res.email);\r\n          // Saves current user session token in context\r\n          createUserAccountDatabase(res, userRole).then((response) => {\r\n            getUserAccountDatabase(res.localId).then((accountInfo) => {\r\n              authCtx.getIsPainUser(accountInfo.isPainUser);\r\n            });\r\n          });\r\n\r\n          // if is pain user direct to pain entries if spectator direct to profile\r\n          if (userRole === \"PAIN USER\") {\r\n            history.replace(\"/pain-entries\");\r\n          } else {\r\n            history.replace(\"/profile\");\r\n          }\r\n        }\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <Grid container component=\"main\" className={classes.root}>\r\n      <CssBaseline />\r\n      {/* //this grid contains the Image */}\r\n      <Grid item xs={false} sm={4} md={7} className={classes.image} />\r\n      {/* This is the sign in / sign up grid */}\r\n      {isSignIn ? (\r\n        <SignIn toSignUp={signInUpSwap} onSubmit={submitHandler} />\r\n      ) : (\r\n        <SignUp toSignIn={signInUpSwap} onSubmit={submitHandler} />\r\n      )}\r\n    </Grid>\r\n  );\r\n}\r\n","import { Route, Switch, Redirect } from \"react-router-dom\";\nimport Records from \"./pages/Records\";\nimport PainEntries from \"./pages/PainEntries\";\nimport Profile from \"./pages/Profile\";\nimport Stats from \"./pages/Stats\";\nimport NavBar from \"./components/layout/NavBar\";\nimport Home from \"./pages/Home\";\nimport \"@fontsource/roboto\";\nimport { MuiThemeProvider, createTheme } from \"@material-ui/core\";\nimport AuthContext from \"./store/Auth-context\";\nimport { useContext } from \"react\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      light: \"#33c9dc\",\n      main: \"#00bcd4\",\n      dark: \"#008394\",\n      contrastText: \"#fff\",\n    },\n    secondary: {\n      light: \"#ff6333\",\n      main: \"#FF9248\",\n      dark: \"#b22a00\",\n      contrastText: \"#fff\",\n    },\n  },\n  typography: {\n    body1: {\n      fontSize: 19,\n      lineHeight: 2,\n    },\n    subtitle1: {\n      color: \"#888\",\n    },\n  },\n});\nfunction App() {\n  const authCtx = useContext(AuthContext);\n  const renderEntryScreen = () => {\n    if (authCtx.isLoggedIn) {\n      if (authCtx.isPainUser) {\n        console.log(`authCtx.isPainUser`, authCtx.isPainUser);\n        return (\n          <Route path=\"/pain-entries\" component={PainEntries}>\n            <PainEntries />\n          </Route>\n        );\n      }\n    }\n  };\n  return (\n    <MuiThemeProvider theme={theme}>\n      <NavBar />\n      <Switch fallback={<p>Loading...</p>}>\n        {!authCtx.isLoggedIn && (\n          <Route\n            path=\"/tangible-chronic-pain-app\"\n            exact\n            component={Home}\n          ></Route>\n        )}\n\n        {authCtx.isLoggedIn && (\n          <Route path=\"/records\" component={Records}>\n            <Records />\n          </Route>\n        )}\n\n        {authCtx.isLoggedIn && (\n          <Route path=\"/stats\" component={Stats}>\n            <Stats />\n          </Route>\n        )}\n\n        {authCtx.isLoggedIn && (\n          <Route path=\"/profile\" component={Profile}>\n            <Profile />\n          </Route>\n        )}\n        {!authCtx.isPainUser && (\n          <Route path=\"/pain-entries\">\n            <Redirect to=\"/stats\" />\n          </Route>\n        )}\n        {renderEntryScreen()}\n        {authCtx.isLoggedIn && (\n          <Route path=\"*\">\n            <Redirect to=\"/stats\" />\n          </Route>\n        )}\n        <Route path=\"*\">\n          <Redirect to=\"/tangible-chronic-pain-app\" />\n        </Route>\n      </Switch>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport \"@fontsource/roboto\";\nimport { AuthContextProvider } from \"./store/Auth-context\";\n\nReactDOM.render(\n  <AuthContextProvider>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </AuthContextProvider>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"pain-records-container\":\"ScaleFrequency_pain-records-container__29hW3\",\"scale-container\":\"ScaleFrequency_scale-container__2UCBQ\",\"none\":\"ScaleFrequency_none__c229j\",\"minor\":\"ScaleFrequency_minor__AAEeE\",\"moderate\":\"ScaleFrequency_moderate__3tami\",\"severe\":\"ScaleFrequency_severe__1ydR9\",\"unimaginable\":\"ScaleFrequency_unimaginable__2n1qE\"};"],"sourceRoot":""}